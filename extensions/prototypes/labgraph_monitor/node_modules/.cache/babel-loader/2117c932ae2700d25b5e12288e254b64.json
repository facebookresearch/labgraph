{"ast":null,"code":"var baseGet = require('./_baseGet'),\n    baseSet = require('./_baseSet'),\n    castPath = require('./_castPath');\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\n\n\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = basePickBy;","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/node_modules/lodash/_basePickBy.js"],"names":["baseGet","require","baseSet","castPath","basePickBy","object","paths","predicate","index","length","result","path","value","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,YAAD,CAArB;AAAA,IACIC,OAAO,GAAGD,OAAO,CAAC,YAAD,CADrB;AAAA,IAEIE,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAFtB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,UAAT,CAAoBC,MAApB,EAA4BC,KAA5B,EAAmCC,SAAnC,EAA8C;AAC5C,MAAIC,KAAK,GAAG,CAAC,CAAb;AAAA,MACIC,MAAM,GAAGH,KAAK,CAACG,MADnB;AAAA,MAEIC,MAAM,GAAG,EAFb;;AAIA,SAAO,EAAEF,KAAF,GAAUC,MAAjB,EAAyB;AACvB,QAAIE,IAAI,GAAGL,KAAK,CAACE,KAAD,CAAhB;AAAA,QACII,KAAK,GAAGZ,OAAO,CAACK,MAAD,EAASM,IAAT,CADnB;;AAGA,QAAIJ,SAAS,CAACK,KAAD,EAAQD,IAAR,CAAb,EAA4B;AAC1BT,MAAAA,OAAO,CAACQ,MAAD,EAASP,QAAQ,CAACQ,IAAD,EAAON,MAAP,CAAjB,EAAiCO,KAAjC,CAAP;AACD;AACF;;AACD,SAAOF,MAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiBV,UAAjB","sourcesContent":["var baseGet = require('./_baseGet'),\n    baseSet = require('./_baseSet'),\n    castPath = require('./_castPath');\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = basePickBy;\n"]},"metadata":{},"sourceType":"script"}