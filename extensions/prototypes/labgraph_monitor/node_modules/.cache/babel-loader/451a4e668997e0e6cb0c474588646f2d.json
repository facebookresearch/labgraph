{"ast":null,"code":"/**\r\n * Converts the data from server to connections array\r\n * @param {Array} data - data received from server through websocket\r\n * @return {Array} An array having arrays of connections\r\n */\nfunction dataToConnections(data) {\n  const connections = {};\n\n  for (const [a, b] of data) {\n    connections[Object.keys(a)[0]] = [Object.keys(b)[0]];\n  }\n\n  return connections;\n}\n/**\r\n * Converts the data from server to connections array\r\n * @param {Array} data - data received from server through websocket\r\n * @return {Array} An array having arrays of Objects representation of data from server\r\n */\n\n\nfunction dataToObjects(data) {\n  const connections = {};\n\n  for (const [a, b] of data) {\n    connections[Object.keys(a)[0]] = a[Object.keys(a)[0]];\n    connections[Object.keys(b)[0]] = b[Object.keys(b)[0]];\n  }\n\n  return connections;\n}\n/**\r\n * Converts the data from server to connections array\r\n * @param {Array} connections - connections between nodes generated from server data\r\n * @return {Array} Elements array having Nodes for graph representation. A sample graph Node has id, data and position\r\n */\n\n\nfunction connectionsToNodes(connections) {\n  connections['NoiseGenerator'].push('Node2');\n  const adjacencyListKeys = Object.keys(connections); // adding all nodes of the graph without duplicates\n\n  const allNodes = Object.keys(connections);\n\n  for (let [, edgeNodes] of Object.entries(connections)) {\n    for (let n of edgeNodes) {\n      if (!allNodes.includes(n)) {\n        allNodes.push(n);\n      }\n    }\n  } // generating the elements list having nodes with their properties\n\n\n  const elements = [];\n  let i = 0;\n\n  for (let node of allNodes) {\n    elements.push({\n      id: node,\n      data: {\n        label: node\n      },\n      position: {\n        x: 100 + 60 * i,\n        y: 125 + 60 * i\n      }\n    });\n    i++;\n  } // generating the edges between every source and target node\n\n\n  for (let i = 0; i < adjacencyListKeys.length; i++) {\n    const node = adjacencyListKeys[i];\n    const edgeNodes = connections[node];\n\n    for (let edgeNode of edgeNodes) {\n      elements.push({\n        id: `e-${node}-${edgeNode}`,\n        source: node,\n        target: edgeNode,\n        animated: true\n      });\n    }\n  }\n\n  return elements;\n}\n\nmodule.exports = {\n  dataToConnections,\n  dataToObjects,\n  connectionsToNodes\n};\ndata = [[{\n  \"NoiseGenerator\": {\n    \"type\": \"Node\",\n    \"config\": {\n      \"NoiseGeneratorConfig\": {\n        \"sample_rate\": \"float\",\n        \"num_features\": \"int\"\n      }\n    },\n    \"inputs\": [],\n    \"outputs\": [{\n      \"RandomMessage\": {\n        \"timestamp\": \"float\",\n        \"data\": \"np.ndarray\"\n      }\n    }]\n  }\n}, {\n  \"RollingAverager\": {\n    \"type\": \"Node\",\n    \"state\": {\n      \"RollingState\": {\n        \"messages\": \"List.RandomMessage\"\n      }\n    },\n    \"config\": {\n      \"RollingConfig\": {\n        \"window\": \"float\"\n      }\n    },\n    \"inputs\": [{\n      \"RandomMessage\": {\n        \"timestamp\": \"float\",\n        \"data\": \"np.ndarray\"\n      }\n    }],\n    \"outputs\": [{\n      \"RandomMessage\": {\n        \"timestamp\": \"float\",\n        \"data\": \"np.ndarray\"\n      }\n    }]\n  }\n}], [{\n  \"RollingAverager\": {\n    \"type\": \"Node\",\n    \"state\": {\n      \"RollingState\": {\n        \"messages\": \"List.RandomMessage\"\n      }\n    },\n    \"config\": {\n      \"RollingConfig\": {\n        \"window\": \"float\"\n      }\n    },\n    \"inputs\": [{\n      \"RandomMessage\": {\n        \"timestamp\": \"float\",\n        \"data\": \"np.ndarray\"\n      }\n    }],\n    \"outputs\": [{\n      \"RandomMessage\": {\n        \"timestamp\": \"float\",\n        \"data\": \"np.ndarray\"\n      }\n    }]\n  }\n}, {\n  \"AveragedNoise\": {\n    \"type\": \"Group\",\n    \"config\": {\n      \"AveragedNoiseConfig\": {\n        \"sample_rate\": \"float\",\n        \"num_features\": \"int\",\n        \"window\": \"float\"\n      }\n    },\n    \"inputs\": [],\n    \"outputs\": [{\n      \"RandomMessage\": {\n        \"timestamp\": \"float\",\n        \"data\": \"np.ndarray\"\n      }\n    }],\n    \"connections\": {\n      \"NoiseGenerator\": \"RollingAverager\",\n      \"RollingAverager\": \"AveragedNoise\"\n    }\n  }\n}], [{\n  \"AveragedNoise\": {\n    \"type\": \"Group\",\n    \"config\": {\n      \"AveragedNoiseConfig\": {\n        \"sample_rate\": \"float\",\n        \"num_features\": \"int\",\n        \"window\": \"float\"\n      }\n    },\n    \"inputs\": [],\n    \"outputs\": [{\n      \"RandomMessage\": {\n        \"timestamp\": \"float\",\n        \"data\": \"np.ndarray\"\n      }\n    }],\n    \"connections\": {\n      \"NoiseGenerator\": \"RollingAverager\",\n      \"RollingAverager\": \"AveragedNoise\"\n    }\n  }\n}, {\n  \"Plot\": {\n    \"type\": \"Node\",\n    \"state\": \"PlotState\",\n    \"config\": \"PlotConfig\",\n    \"inputs\": [\"RandomMessage\"],\n    \"outputs\": []\n  }\n}]];","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/src/helper.js"],"names":["dataToConnections","data","connections","a","b","Object","keys","dataToObjects","connectionsToNodes","push","adjacencyListKeys","allNodes","edgeNodes","entries","n","includes","elements","i","node","id","label","position","x","y","length","edgeNode","source","target","animated","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Converts the data from server to connections array\r\n * @param {Array} data - data received from server through websocket\r\n * @return {Array} An array having arrays of connections\r\n */\r\nfunction dataToConnections(data){\r\n    const connections = {}\r\n    for (const [a, b] of data) {\r\n        connections[Object.keys(a)[0]] = [\r\n            Object.keys(b)[0]\r\n        ]\r\n    }\r\n    return connections\r\n}\r\n\r\n/**\r\n * Converts the data from server to connections array\r\n * @param {Array} data - data received from server through websocket\r\n * @return {Array} An array having arrays of Objects representation of data from server\r\n */\r\nfunction dataToObjects(data){\r\n    const connections = {}\r\n    for (const [a, b] of data) {\r\n        connections[Object.keys(a)[0]] = a[Object.keys(a)[0]]\r\n        connections[Object.keys(b)[0]] = b[Object.keys(b)[0]]\r\n    }\r\n    return connections\r\n}\r\n\r\n/**\r\n * Converts the data from server to connections array\r\n * @param {Array} connections - connections between nodes generated from server data\r\n * @return {Array} Elements array having Nodes for graph representation. A sample graph Node has id, data and position\r\n */\r\n function connectionsToNodes(connections){\r\n    connections['NoiseGenerator'].push('Node2')\r\n    const adjacencyListKeys = Object.keys(connections)\r\n    // adding all nodes of the graph without duplicates\r\n    const allNodes = Object.keys(connections)\r\n    for (let [, edgeNodes] of Object.entries(connections)) {\r\n        for (let n of edgeNodes) {\r\n            if (!allNodes.includes(n)) {\r\n            allNodes.push(n)\r\n            }\r\n        }\r\n    }\r\n    // generating the elements list having nodes with their properties\r\n    const elements = []\r\n    let i = 0\r\n    for (let node of allNodes) {\r\n        elements.push({\r\n            id: node,\r\n            data: { label: node },\r\n            position: { x: 100 + 60 * i, y: 125 + 60 * i },\r\n        })\r\n        i++;\r\n    }\r\n    // generating the edges between every source and target node\r\n    for (let i = 0; i < adjacencyListKeys.length; i++) {\r\n        const node = adjacencyListKeys[i]\r\n        const edgeNodes = connections[node]\r\n        for (let edgeNode of edgeNodes) {\r\n            elements.push({ id: `e-${node}-${edgeNode}`, source: node, target: edgeNode, animated: true },)\r\n        }\r\n    }\r\n\r\n    return elements\r\n }\r\n\r\nmodule.exports = {\r\n    dataToConnections,\r\n    dataToObjects,\r\n    connectionsToNodes,\r\n}\r\n\r\ndata = [\r\n    [\r\n        {\r\n            \"NoiseGenerator\": {\r\n                \"type\": \"Node\",\r\n                \"config\": {\r\n                    \"NoiseGeneratorConfig\": {\r\n                        \"sample_rate\": \"float\",\r\n                        \"num_features\": \"int\"\r\n                    }\r\n                },\r\n                \"inputs\": [],\r\n                \"outputs\": [\r\n                    {\r\n                        \"RandomMessage\": {\r\n                            \"timestamp\": \"float\",\r\n                            \"data\": \"np.ndarray\"\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"RollingAverager\": {\r\n                \"type\": \"Node\",\r\n                \"state\": {\r\n                    \"RollingState\": {\r\n                        \"messages\": \"List.RandomMessage\"\r\n                    }\r\n                },\r\n                \"config\": {\r\n                    \"RollingConfig\": {\r\n                        \"window\": \"float\"\r\n                    }\r\n                },\r\n                \"inputs\": [\r\n                    {\r\n                        \"RandomMessage\": {\r\n                            \"timestamp\": \"float\",\r\n                            \"data\": \"np.ndarray\"\r\n                        }\r\n                    }\r\n                ],\r\n                \"outputs\": [\r\n                    {\r\n                        \"RandomMessage\": {\r\n                            \"timestamp\": \"float\",\r\n                            \"data\": \"np.ndarray\"\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            \"RollingAverager\": {\r\n                \"type\": \"Node\",\r\n                \"state\": {\r\n                    \"RollingState\": {\r\n                        \"messages\": \"List.RandomMessage\"\r\n                    }\r\n                },\r\n                \"config\": {\r\n                    \"RollingConfig\": {\r\n                        \"window\": \"float\"\r\n                    }\r\n                },\r\n                \"inputs\": [\r\n                    {\r\n                        \"RandomMessage\": {\r\n                            \"timestamp\": \"float\",\r\n                            \"data\": \"np.ndarray\"\r\n                        }\r\n                    }\r\n                ],\r\n                \"outputs\": [\r\n                    {\r\n                        \"RandomMessage\": {\r\n                            \"timestamp\": \"float\",\r\n                            \"data\": \"np.ndarray\"\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"AveragedNoise\": {\r\n                \"type\": \"Group\",\r\n                \"config\": {\r\n                    \"AveragedNoiseConfig\": {\r\n                        \"sample_rate\": \"float\",\r\n                        \"num_features\": \"int\",\r\n                        \"window\": \"float\"\r\n                    }\r\n                },\r\n                \"inputs\": [],\r\n                \"outputs\": [\r\n                    {\r\n                        \"RandomMessage\": {\r\n                            \"timestamp\": \"float\",\r\n                            \"data\": \"np.ndarray\"\r\n                        }\r\n                    }\r\n                ],\r\n                \"connections\": {\r\n                    \"NoiseGenerator\": \"RollingAverager\",\r\n                    \"RollingAverager\": \"AveragedNoise\"\r\n                }\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        {\r\n            \"AveragedNoise\": {\r\n                \"type\": \"Group\",\r\n                \"config\": {\r\n                    \"AveragedNoiseConfig\": {\r\n                        \"sample_rate\": \"float\",\r\n                        \"num_features\": \"int\",\r\n                        \"window\": \"float\"\r\n                    }\r\n                },\r\n                \"inputs\": [],\r\n                \"outputs\": [\r\n                    {\r\n                        \"RandomMessage\": {\r\n                            \"timestamp\": \"float\",\r\n                            \"data\": \"np.ndarray\"\r\n                        }\r\n                    }\r\n                ],\r\n                \"connections\": {\r\n                    \"NoiseGenerator\": \"RollingAverager\",\r\n                    \"RollingAverager\": \"AveragedNoise\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"Plot\": {\r\n                \"type\": \"Node\",\r\n                \"state\": \"PlotState\",\r\n                \"config\": \"PlotConfig\",\r\n                \"inputs\": [\r\n                    \"RandomMessage\"\r\n                ],\r\n                \"outputs\": []\r\n            }\r\n        }\r\n    ]\r\n]\r\n"]},"metadata":{},"sourceType":"module"}