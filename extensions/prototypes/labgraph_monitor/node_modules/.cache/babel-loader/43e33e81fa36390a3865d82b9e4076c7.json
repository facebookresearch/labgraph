{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zenak\\\\Desktop\\\\labgraph_monitor\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useCallback } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, removeElements, isNode } from 'react-flow-renderer';\nimport dagre from 'dagre';\nimport initialElements from './initial-elements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dagreGraph = new dagre.graphlib.Graph();\ndagreGraph.setDefaultEdgeLabel(() => ({})); // In order to keep this example simple the node width and height are hardcoded.\n// In a real world app you would use the correct width and height values of\n// const nodes = useStoreState(state => state.nodes) and then node.__rf.width, node.__rf.height\n\nconst nodeWidth = 172;\nconst nodeHeight = 36;\n\nconst getLayoutedElements = (elements, direction = 'TB') => {\n  const isHorizontal = direction === 'LR';\n  dagreGraph.setGraph({\n    rankdir: direction\n  });\n  elements.forEach(el => {\n    if (isNode(el)) {\n      dagreGraph.setNode(el.id, {\n        width: nodeWidth,\n        height: nodeHeight\n      });\n    } else {\n      dagreGraph.setEdge(el.source, el.target);\n    }\n  });\n  dagre.layout(dagreGraph);\n  return elements.map(el => {\n    if (isNode(el)) {\n      const nodeWithPosition = dagreGraph.node(el.id);\n      el.targetPosition = isHorizontal ? 'left' : 'top';\n      el.sourcePosition = isHorizontal ? 'right' : 'bottom'; // unfortunately we need this little hack to pass a slightly different position\n      // to notify react flow about the change. Moreover we are shifting the dagre node position\n      // (anchor=center center) to the top left so it matches the react flow node anchor point (top left).\n\n      el.position = {\n        x: nodeWithPosition.x - nodeWidth / 2 + Math.random() / 1000,\n        y: nodeWithPosition.y - nodeHeight / 2\n      };\n    }\n\n    return el;\n  });\n};\n\nconst layoutedElements = getLayoutedElements(initialElements);\n\nconst LayoutFlow = () => {\n  _s();\n\n  const [elements, setElements] = useState(layoutedElements);\n\n  const onConnect = params => setElements(els => addEdge({ ...params,\n    type: 'smoothstep',\n    animated: true\n  }, els));\n\n  const onElementsRemove = elementsToRemove => setElements(els => removeElements(elementsToRemove, els));\n\n  const onLayout = useCallback(direction => {\n    const layoutedElements = getLayoutedElements(elements, direction);\n    setElements(layoutedElements);\n  }, [elements]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"layoutflow\",\n    style: {\n      height: 400\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n      children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n        elements: elements,\n        onConnect: onConnect,\n        onElementsRemove: onElementsRemove,\n        connectionLineType: \"smoothstep\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => onLayout('TB'),\n          children: \"vertical layout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => onLayout('LR'),\n          children: \"horizontal layout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LayoutFlow, \"yglGtvThLzy2ZaJtjKP99rUPgJ8=\");\n\n_c = LayoutFlow;\nexport default LayoutFlow;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutFlow\");","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/src/App.js"],"names":["React","useState","useCallback","ReactFlow","ReactFlowProvider","addEdge","removeElements","isNode","dagre","initialElements","dagreGraph","graphlib","Graph","setDefaultEdgeLabel","nodeWidth","nodeHeight","getLayoutedElements","elements","direction","isHorizontal","setGraph","rankdir","forEach","el","setNode","id","width","height","setEdge","source","target","layout","map","nodeWithPosition","node","targetPosition","sourcePosition","position","x","Math","random","y","layoutedElements","LayoutFlow","setElements","onConnect","params","els","type","animated","onElementsRemove","elementsToRemove","onLayout"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useCallback } from 'react';\r\nimport ReactFlow, {\r\n  ReactFlowProvider,\r\n  addEdge,\r\n  removeElements,\r\n  isNode,\r\n} from 'react-flow-renderer';\r\nimport dagre from 'dagre';\r\n\r\nimport initialElements from './initial-elements';\r\n\r\nconst dagreGraph = new dagre.graphlib.Graph();\r\ndagreGraph.setDefaultEdgeLabel(() => ({}));\r\n\r\n// In order to keep this example simple the node width and height are hardcoded.\r\n// In a real world app you would use the correct width and height values of\r\n// const nodes = useStoreState(state => state.nodes) and then node.__rf.width, node.__rf.height\r\n\r\nconst nodeWidth = 172;\r\nconst nodeHeight = 36;\r\n\r\nconst getLayoutedElements = (elements, direction = 'TB') => {\r\n  const isHorizontal = direction === 'LR';\r\n  dagreGraph.setGraph({ rankdir: direction });\r\n\r\n  elements.forEach((el) => {\r\n    if (isNode(el)) {\r\n      dagreGraph.setNode(el.id, { width: nodeWidth, height: nodeHeight });\r\n    } else {\r\n      dagreGraph.setEdge(el.source, el.target);\r\n    }\r\n  });\r\n\r\n  dagre.layout(dagreGraph);\r\n\r\n  return elements.map((el) => {\r\n    if (isNode(el)) {\r\n      const nodeWithPosition = dagreGraph.node(el.id);\r\n      el.targetPosition = isHorizontal ? 'left' : 'top';\r\n      el.sourcePosition = isHorizontal ? 'right' : 'bottom';\r\n\r\n      // unfortunately we need this little hack to pass a slightly different position\r\n      // to notify react flow about the change. Moreover we are shifting the dagre node position\r\n      // (anchor=center center) to the top left so it matches the react flow node anchor point (top left).\r\n      el.position = {\r\n        x: nodeWithPosition.x - nodeWidth / 2 + Math.random() / 1000,\r\n        y: nodeWithPosition.y - nodeHeight / 2,\r\n      };\r\n    }\r\n\r\n    return el;\r\n  });\r\n};\r\n\r\nconst layoutedElements = getLayoutedElements(initialElements);\r\n\r\nconst LayoutFlow = () => {\r\n  const [elements, setElements] = useState(layoutedElements);\r\n  const onConnect = (params) =>\r\n    setElements((els) =>\r\n      addEdge({ ...params, type: 'smoothstep', animated: true }, els)\r\n    );\r\n  const onElementsRemove = (elementsToRemove) =>\r\n    setElements((els) => removeElements(elementsToRemove, els));\r\n\r\n  const onLayout = useCallback(\r\n    (direction) => {\r\n      const layoutedElements = getLayoutedElements(elements, direction);\r\n      setElements(layoutedElements);\r\n    },\r\n    [elements]\r\n  );\r\n\r\n  return (\r\n    <div className=\"layoutflow\" style={{ height: 400 }}>\r\n      <ReactFlowProvider>\r\n        <ReactFlow\r\n          elements={elements}\r\n          onConnect={onConnect}\r\n          onElementsRemove={onElementsRemove}\r\n          connectionLineType=\"smoothstep\"\r\n        />\r\n        <div className=\"controls\">\r\n          <button onClick={() => onLayout('TB')}>vertical layout</button>\r\n          <button onClick={() => onLayout('LR')}>horizontal layout</button>\r\n        </div>\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LayoutFlow;"]},"metadata":{},"sourceType":"module"}