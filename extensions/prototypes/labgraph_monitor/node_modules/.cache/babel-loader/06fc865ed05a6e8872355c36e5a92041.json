{"ast":null,"code":"var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\n\n\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = baseFlatten;","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/node_modules/lodash/_baseFlatten.js"],"names":["arrayPush","require","isFlattenable","baseFlatten","array","depth","predicate","isStrict","result","index","length","value","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAvB;AAAA,IACIC,aAAa,GAAGD,OAAO,CAAC,kBAAD,CAD3B;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,SAAnC,EAA8CC,QAA9C,EAAwDC,MAAxD,EAAgE;AAC9D,MAAIC,KAAK,GAAG,CAAC,CAAb;AAAA,MACIC,MAAM,GAAGN,KAAK,CAACM,MADnB;AAGAJ,EAAAA,SAAS,KAAKA,SAAS,GAAGJ,aAAjB,CAAT;AACAM,EAAAA,MAAM,KAAKA,MAAM,GAAG,EAAd,CAAN;;AAEA,SAAO,EAAEC,KAAF,GAAUC,MAAjB,EAAyB;AACvB,QAAIC,KAAK,GAAGP,KAAK,CAACK,KAAD,CAAjB;;AACA,QAAIJ,KAAK,GAAG,CAAR,IAAaC,SAAS,CAACK,KAAD,CAA1B,EAAmC;AACjC,UAAIN,KAAK,GAAG,CAAZ,EAAe;AACb;AACAF,QAAAA,WAAW,CAACQ,KAAD,EAAQN,KAAK,GAAG,CAAhB,EAAmBC,SAAnB,EAA8BC,QAA9B,EAAwCC,MAAxC,CAAX;AACD,OAHD,MAGO;AACLR,QAAAA,SAAS,CAACQ,MAAD,EAASG,KAAT,CAAT;AACD;AACF,KAPD,MAOO,IAAI,CAACJ,QAAL,EAAe;AACpBC,MAAAA,MAAM,CAACA,MAAM,CAACE,MAAR,CAAN,GAAwBC,KAAxB;AACD;AACF;;AACD,SAAOH,MAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBV,WAAjB","sourcesContent":["var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n"]},"metadata":{},"sourceType":"script"}