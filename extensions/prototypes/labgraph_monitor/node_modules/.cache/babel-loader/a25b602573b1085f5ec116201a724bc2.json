{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zenak\\\\Desktop\\\\labgraph_monitor\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport ReactFlow, { addEdge, MiniMap, Controls, Background } from 'react-flow-renderer';\nimport { dataToConnections, connectionsToNodes, dataToObjects } from './helper';\nimport './App.css';\nimport dagre from 'dagre'; // sample connections array: {'NoiseGenerator': ['RollingAverager'], 'RollingAverager': ['AveragedNoise'], 'AveragedNoise': ['Plot']}\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dagreGraph = new dagre.graphlib.Graph();\ndagreGraph.setDefaultEdgeLabel(() => ({}));\nconst nodeWidth = 172;\nconst nodeHeight = 36;\n\nconst getLayoutedElements = (elements, direction = 'TB') => {\n  const isHorizontal = direction === 'LR';\n  dagreGraph.setGraph({\n    rankdir: direction\n  });\n  elements.forEach(el => {\n    if (isNode(el)) {\n      dagreGraph.setNode(el.id, {\n        width: nodeWidth,\n        height: nodeHeight\n      });\n    } else {\n      dagreGraph.setEdge(el.source, el.target);\n    }\n  });\n  dagre.layout(dagreGraph);\n  return elements.map(el => {\n    if (isNode(el)) {\n      const nodeWithPosition = dagreGraph.node(el.id);\n      el.targetPosition = isHorizontal ? 'left' : 'top';\n      el.sourcePosition = isHorizontal ? 'right' : 'bottom'; // unfortunately we need this little hack to pass a slightly different position\n      // to notify react flow about the change. Moreover we are shifting the dagre node position\n      // (anchor=center center) to the top left so it matches the react flow node anchor point (top left).\n\n      el.position = {\n        x: nodeWithPosition.x - nodeWidth / 2 + Math.random() / 1000,\n        y: nodeWithPosition.y - nodeHeight / 2\n      };\n    }\n\n    return el;\n  });\n};\n\nconst InteractionGraph = () => {\n  _s();\n\n  const [node_name, setName] = useState(\"None\");\n  const [connections, setConnections] = useState([]);\n  const [elements, setElements] = useState([]);\n  const [nodeObjects, setNodeObjects] = useState([]);\n  const [type, setType] = useState('None'); // getting the node that the user is clicking \n\n  const onElementClick = (event, element) => {\n    setName(element.id);\n    setType(nodeObjects[element.id].type);\n    console.log(\"node\", node_name);\n  }; // receiving the messages from server \n\n\n  useEffect(() => {\n    // connecting to the server \n    const client = new W3CWebSocket('ws://localhost:9000');\n\n    client.onopen = () => {\n      console.log('connected');\n      client.send(JSON.stringify({\n        \"api_version\": \"0.1\",\n        \"api_request\": {\n          \"request_id\": 1,\n          \"start_stream_request\": {\n            \"stream_id\": \"LABGRAPH.MONITOR\",\n            \"labgraph.monitor\": {}\n          }\n        }\n      }));\n    };\n\n    client.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data);\n\n      if (dataFromServer.stream_batch) {\n        const data_array = dataFromServer.stream_batch[\"labgraph.monitor\"].samples[0].data;\n        const connections = dataToConnections(data_array);\n        const elements = connectionsToNodes(connections);\n        const layoutedElements = getLayoutedElements(elements);\n        const nodeObjects = dataToObjects(data_array);\n        setElements(layoutedElements);\n        setConnections(connections);\n        setNodeObjects(nodeObjects);\n        console.log(\"connection\", connections);\n        console.log(\"server message received \", data_array);\n      }\n    };\n\n    return () => {\n      client.close();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"annotations\",\n        children: \"Annotations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Node\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: node_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 400\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        elements: elements,\n        onElementClick: onElementClick,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {\n          nodeBorderRadius: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          color: \"#aaa\",\n          gap: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 3\n  }, this);\n};\n\n_s(InteractionGraph, \"kF6JY8onXijG4+lBRo/ISXtvhAc=\");\n\n_c = InteractionGraph;\nexport default InteractionGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"InteractionGraph\");","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/src/App.js"],"names":["React","useState","useEffect","w3cwebsocket","W3CWebSocket","ReactFlow","addEdge","MiniMap","Controls","Background","dataToConnections","connectionsToNodes","dataToObjects","dagre","dagreGraph","graphlib","Graph","setDefaultEdgeLabel","nodeWidth","nodeHeight","getLayoutedElements","elements","direction","isHorizontal","setGraph","rankdir","forEach","el","isNode","setNode","id","width","height","setEdge","source","target","layout","map","nodeWithPosition","node","targetPosition","sourcePosition","position","x","Math","random","y","InteractionGraph","node_name","setName","connections","setConnections","setElements","nodeObjects","setNodeObjects","type","setType","onElementClick","event","element","console","log","client","onopen","send","JSON","stringify","onmessage","message","dataFromServer","parse","data","stream_batch","data_array","samples","layoutedElements","close"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport ReactFlow, { addEdge, MiniMap, Controls, Background } from 'react-flow-renderer';\r\nimport { dataToConnections, connectionsToNodes, dataToObjects } from './helper';\r\nimport './App.css';\r\nimport dagre from 'dagre';\r\n\r\n// sample connections array: {'NoiseGenerator': ['RollingAverager'], 'RollingAverager': ['AveragedNoise'], 'AveragedNoise': ['Plot']}\r\n\r\nconst dagreGraph = new dagre.graphlib.Graph();\r\ndagreGraph.setDefaultEdgeLabel(() => ({}));\r\n\r\nconst nodeWidth = 172;\r\nconst nodeHeight = 36;\r\n\r\nconst getLayoutedElements = (elements, direction = 'TB') => {\r\n  const isHorizontal = direction === 'LR';\r\n  dagreGraph.setGraph({ rankdir: direction });\r\n\r\n  elements.forEach((el) => {\r\n    if (isNode(el)) {\r\n      dagreGraph.setNode(el.id, { width: nodeWidth, height: nodeHeight });\r\n    } else {\r\n      dagreGraph.setEdge(el.source, el.target);\r\n    }\r\n  });\r\n\r\n  dagre.layout(dagreGraph);\r\n\r\n  return elements.map((el) => {\r\n    if (isNode(el)) {\r\n      const nodeWithPosition = dagreGraph.node(el.id);\r\n      el.targetPosition = isHorizontal ? 'left' : 'top';\r\n      el.sourcePosition = isHorizontal ? 'right' : 'bottom';\r\n\r\n      // unfortunately we need this little hack to pass a slightly different position\r\n      // to notify react flow about the change. Moreover we are shifting the dagre node position\r\n      // (anchor=center center) to the top left so it matches the react flow node anchor point (top left).\r\n      el.position = {\r\n        x: nodeWithPosition.x - nodeWidth / 2 + Math.random() / 1000,\r\n        y: nodeWithPosition.y - nodeHeight / 2,\r\n      };\r\n    }\r\n\r\n    return el;\r\n  });\r\n};\r\n\r\nconst InteractionGraph = () => {\r\n  const [node_name, setName] = useState(\"None\");\r\n  const [connections, setConnections] = useState([]);\r\n  const [elements, setElements] = useState([]);\r\n  const [nodeObjects, setNodeObjects] = useState([]);\r\n  const [type, setType] = useState('None')\r\n\r\n  // getting the node that the user is clicking \r\n  const onElementClick = (event, element) => {\r\n    setName(element.id)\r\n    setType(nodeObjects[element.id].type)\r\n    console.log(\"node\", node_name)\r\n  };\r\n\r\n  // receiving the messages from server \r\n  useEffect(() => {\r\n    // connecting to the server \r\n    const client = new W3CWebSocket('ws://localhost:9000');\r\n\r\n    client.onopen = () => {\r\n      console.log('connected');\r\n      client.send(JSON.stringify({\r\n        \"api_version\": \"0.1\",\r\n        \"api_request\": {\r\n          \"request_id\": 1,\r\n          \"start_stream_request\": {\r\n            \"stream_id\": \"LABGRAPH.MONITOR\",\r\n             \"labgraph.monitor\": {\r\n             }\r\n          }\r\n        }\r\n     }))\r\n    };\r\n\r\n    client.onmessage = (message) => {\r\n      const dataFromServer = JSON.parse(message.data);\r\n      if (dataFromServer.stream_batch){\r\n        const data_array = dataFromServer.stream_batch[\"labgraph.monitor\"].samples[0].data;\r\n        const connections = dataToConnections(data_array);\r\n        const elements = connectionsToNodes(connections);\r\n        const layoutedElements = getLayoutedElements(elements);\r\n        const nodeObjects = dataToObjects(data_array);\r\n        setElements(layoutedElements);\r\n        setConnections(connections);\r\n        setNodeObjects(nodeObjects);\r\n        console.log(\"connection\", connections);\r\n        console.log(\"server message received \", data_array)\r\n      }\r\n    };\r\n\r\n    return () => {\r\n      client.close();\r\n    }\r\n  }, []);\r\n\r\n  return(\r\n  <div>\r\n    <div className='table-div'> \r\n      <div className='annotations'>Annotations</div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Node</th>\r\n            <th>Type</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>{node_name}</td>\r\n            <td>{type}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n    <div style={{ height: 400 }}> \r\n    <ReactFlow \r\n    elements={elements}\r\n    onElementClick={onElementClick}\r\n    >\r\n      <MiniMap\r\n        nodeBorderRadius={2}\r\n      />\r\n      <Controls />\r\n      <Background color=\"#aaa\" gap={16} />\r\n    </ReactFlow>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  \r\n  )\r\n};\r\n\r\nexport default InteractionGraph;"]},"metadata":{},"sourceType":"module"}