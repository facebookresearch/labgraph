{"ast":null,"code":"/**\r\n * Converts the data from server to connections array\r\n * @param {Array} data - data received from server through websocket\r\n * @return {Array} An array having arrays of connections\r\n */\nfunction dataToConnections(data) {\n  const connections = {};\n\n  for (const [a, b] of data) {\n    connections[Object.keys(a)[0]] = [Object.keys(b)[0]];\n  }\n\n  return connections;\n}\n/**\r\n * Converts the data from server to connections array\r\n * @param {Array} data - data received from server through websocket\r\n * @return {Array} An array having arrays of Objects representation of data from server\r\n */\n\n\nfunction dataToObjects(data) {\n  const connections = {};\n\n  for (const [a, b] of data) {\n    connections[Object.keys(a)[0]] = a[Object.keys(a)[0]];\n    connections[Object.keys(b)[0]] = b[Object.keys(b)[0]];\n  }\n\n  return connections;\n}\n/**\r\n * Converts the data from server to connections array\r\n * @param {Array} connections - connections between nodes generated from server data\r\n * @return {Array} Elements array having Nodes for graph representation. A sample graph Node has id, data and position\r\n */\n\n\nfunction connectionsToNodes(connections) {\n  connections['NoiseGenerator'].push('Node2', 'Node3');\n  connections['Node2'].push('Node5', 'Node8');\n  connections['Node3'].push('Node59', 'Node68'); // connections['RollingAverager'].push('Node4', 'Node5')\n  // connections['Node2'] = ['Node6', 'Node7']\n\n  const adjacencyListKeys = Object.keys(connections);\n  console.log(\"adjacency list keys\", adjacencyListKeys);\n  console.log(\"connections are\", connections); // adding all nodes of the graph without duplicates\n\n  const allNodes = Object.keys(connections);\n\n  for (let [, edgeNodes] of Object.entries(connections)) {\n    for (let n of edgeNodes) {\n      if (!allNodes.includes(n)) {\n        allNodes.push(n);\n      }\n    }\n  } // generating the elements list having nodes with their properties\n\n\n  const elements = [];\n\n  for (let node of allNodes) {\n    elements.push({\n      id: node,\n      data: {\n        label: node\n      },\n      position: 0\n    });\n  }\n\n  const elements_index = {};\n\n  for (let i = 0; i < elements.length; i++) {\n    const node = elements[i].id;\n    elements_index[node] = i;\n  } // generating the edges between every source and target node\n\n\n  for (let i = 0; i < adjacencyListKeys.length; i++) {\n    const node = adjacencyListKeys[i];\n    const edgeNodes = connections[node];\n    let j = -1;\n\n    for (let edgeNode of edgeNodes) {\n      elements.push({\n        id: `e-${node}-${edgeNode}`,\n        source: node,\n        target: edgeNode,\n        animated: true\n      });\n      j++;\n    }\n  }\n\n  console.log(elements);\n  return elements;\n}\n\nmodule.exports = {\n  dataToConnections,\n  dataToObjects,\n  connectionsToNodes\n}; // data = [\n//     [\n//         {\n//             \"NoiseGenerator\": {\n//                 \"type\": \"Node\",\n//                 \"config\": {\n//                     \"NoiseGeneratorConfig\": {\n//                         \"sample_rate\": \"float\",\n//                         \"num_features\": \"int\"\n//                     }\n//                 },\n//                 \"inputs\": [],\n//                 \"outputs\": [\n//                     {\n//                         \"RandomMessage\": {\n//                             \"timestamp\": \"float\",\n//                             \"data\": \"np.ndarray\"\n//                         }\n//                     }\n//                 ]\n//             }\n//         },\n//         {\n//             \"RollingAverager\": {\n//                 \"type\": \"Node\",\n//                 \"state\": {\n//                     \"RollingState\": {\n//                         \"messages\": \"List.RandomMessage\"\n//                     }\n//                 },\n//                 \"config\": {\n//                     \"RollingConfig\": {\n//                         \"window\": \"float\"\n//                     }\n//                 },\n//                 \"inputs\": [\n//                     {\n//                         \"RandomMessage\": {\n//                             \"timestamp\": \"float\",\n//                             \"data\": \"np.ndarray\"\n//                         }\n//                     }\n//                 ],\n//                 \"outputs\": [\n//                     {\n//                         \"RandomMessage\": {\n//                             \"timestamp\": \"float\",\n//                             \"data\": \"np.ndarray\"\n//                         }\n//                     }\n//                 ]\n//             }\n//         }\n//     ],\n//     [\n//         {\n//             \"RollingAverager\": {\n//                 \"type\": \"Node\",\n//                 \"state\": {\n//                     \"RollingState\": {\n//                         \"messages\": \"List.RandomMessage\"\n//                     }\n//                 },\n//                 \"config\": {\n//                     \"RollingConfig\": {\n//                         \"window\": \"float\"\n//                     }\n//                 },\n//                 \"inputs\": [\n//                     {\n//                         \"RandomMessage\": {\n//                             \"timestamp\": \"float\",\n//                             \"data\": \"np.ndarray\"\n//                         }\n//                     }\n//                 ],\n//                 \"outputs\": [\n//                     {\n//                         \"RandomMessage\": {\n//                             \"timestamp\": \"float\",\n//                             \"data\": \"np.ndarray\"\n//                         }\n//                     }\n//                 ]\n//             }\n//         },\n//         {\n//             \"AveragedNoise\": {\n//                 \"type\": \"Group\",\n//                 \"config\": {\n//                     \"AveragedNoiseConfig\": {\n//                         \"sample_rate\": \"float\",\n//                         \"num_features\": \"int\",\n//                         \"window\": \"float\"\n//                     }\n//                 },\n//                 \"inputs\": [],\n//                 \"outputs\": [\n//                     {\n//                         \"RandomMessage\": {\n//                             \"timestamp\": \"float\",\n//                             \"data\": \"np.ndarray\"\n//                         }\n//                     }\n//                 ],\n//                 \"connections\": {\n//                     \"NoiseGenerator\": \"RollingAverager\",\n//                     \"RollingAverager\": \"AveragedNoise\"\n//                 }\n//             }\n//         }\n//     ],\n//     [\n//         {\n//             \"AveragedNoise\": {\n//                 \"type\": \"Group\",\n//                 \"config\": {\n//                     \"AveragedNoiseConfig\": {\n//                         \"sample_rate\": \"float\",\n//                         \"num_features\": \"int\",\n//                         \"window\": \"float\"\n//                     }\n//                 },\n//                 \"inputs\": [],\n//                 \"outputs\": [\n//                     {\n//                         \"RandomMessage\": {\n//                             \"timestamp\": \"float\",\n//                             \"data\": \"np.ndarray\"\n//                         }\n//                     }\n//                 ],\n//                 \"connections\": {\n//                     \"NoiseGenerator\": \"RollingAverager\",\n//                     \"RollingAverager\": \"AveragedNoise\"\n//                 }\n//             }\n//         },\n//         {\n//             \"Plot\": {\n//                 \"type\": \"Node\",\n//                 \"state\": \"PlotState\",\n//                 \"config\": \"PlotConfig\",\n//                 \"inputs\": [\n//                     \"RandomMessage\"\n//                 ],\n//                 \"outputs\": []\n//             }\n//         }\n//     ]\n// ]\n// const connections = dataToConnections(data);\n// const elements = connectionsToNodes(connections);\n// console.log(elements)\n// console.log(elements.length)","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/src/helper.js"],"names":["dataToConnections","data","connections","a","b","Object","keys","dataToObjects","connectionsToNodes","push","adjacencyListKeys","console","log","allNodes","edgeNodes","entries","n","includes","elements","node","id","label","position","elements_index","i","length","j","edgeNode","source","target","animated","module","exports"],"mappings":"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":["/**\r\n * Converts the data from server to connections array\r\n * @param {Array} data - data received from server through websocket\r\n * @return {Array} An array having arrays of connections\r\n */\r\nfunction dataToConnections(data){\r\n    const connections = {}\r\n    for (const [a, b] of data) {\r\n        connections[Object.keys(a)[0]] = [\r\n            Object.keys(b)[0]\r\n        ]\r\n    }\r\n    return connections\r\n}\r\n\r\n/**\r\n * Converts the data from server to connections array\r\n * @param {Array} data - data received from server through websocket\r\n * @return {Array} An array having arrays of Objects representation of data from server\r\n */\r\nfunction dataToObjects(data){\r\n    const connections = {}\r\n    for (const [a, b] of data) {\r\n        connections[Object.keys(a)[0]] = a[Object.keys(a)[0]]\r\n        connections[Object.keys(b)[0]] = b[Object.keys(b)[0]]\r\n    }\r\n    return connections\r\n}\r\n\r\n/**\r\n * Converts the data from server to connections array\r\n * @param {Array} connections - connections between nodes generated from server data\r\n * @return {Array} Elements array having Nodes for graph representation. A sample graph Node has id, data and position\r\n */\r\n function connectionsToNodes(connections){\r\n    connections['NoiseGenerator'].push('Node2', 'Node3')\r\n    connections['Node2'].push('Node5', 'Node8')\r\n    connections['Node3'].push('Node59', 'Node68')\r\n    // connections['RollingAverager'].push('Node4', 'Node5')\r\n    // connections['Node2'] = ['Node6', 'Node7']\r\n    const adjacencyListKeys = Object.keys(connections)\r\n    console.log(\"adjacency list keys\", adjacencyListKeys)\r\n    console.log(\"connections are\" , connections)\r\n    // adding all nodes of the graph without duplicates\r\n    const allNodes = Object.keys(connections)\r\n    for (let [, edgeNodes] of Object.entries(connections)) {\r\n        for (let n of edgeNodes) {\r\n            if (!allNodes.includes(n)) {\r\n            allNodes.push(n)\r\n            }\r\n        }\r\n    }\r\n    // generating the elements list having nodes with their properties\r\n    const elements = []\r\n    for (let node of allNodes) {\r\n        elements.push({\r\n            id: node,\r\n            data: { label: node },\r\n            position: 0,\r\n        })\r\n    }\r\n\r\n    const elements_index = {}\r\n\r\n    for (let i = 0; i < elements.length; i++) {\r\n        const node = elements[i].id\r\n        elements_index[node] = i\r\n    }\r\n\r\n    // generating the edges between every source and target node\r\n    for (let i = 0; i < adjacencyListKeys.length; i++) {\r\n        const node = adjacencyListKeys[i]\r\n        const edgeNodes = connections[node]\r\n        let j = -1\r\n        for (let edgeNode of edgeNodes) {\r\n            elements.push({ id: `e-${node}-${edgeNode}`, source: node, target: edgeNode, animated: true },)\r\n            j ++\r\n        }\r\n    }\r\n\r\n    console.log(elements)\r\n\r\n    return elements\r\n }\r\n\r\nmodule.exports = {\r\n    dataToConnections,\r\n    dataToObjects,\r\n    connectionsToNodes,\r\n}\r\n\r\n// data = [\r\n//     [\r\n//         {\r\n//             \"NoiseGenerator\": {\r\n//                 \"type\": \"Node\",\r\n//                 \"config\": {\r\n//                     \"NoiseGeneratorConfig\": {\r\n//                         \"sample_rate\": \"float\",\r\n//                         \"num_features\": \"int\"\r\n//                     }\r\n//                 },\r\n//                 \"inputs\": [],\r\n//                 \"outputs\": [\r\n//                     {\r\n//                         \"RandomMessage\": {\r\n//                             \"timestamp\": \"float\",\r\n//                             \"data\": \"np.ndarray\"\r\n//                         }\r\n//                     }\r\n//                 ]\r\n//             }\r\n//         },\r\n//         {\r\n//             \"RollingAverager\": {\r\n//                 \"type\": \"Node\",\r\n//                 \"state\": {\r\n//                     \"RollingState\": {\r\n//                         \"messages\": \"List.RandomMessage\"\r\n//                     }\r\n//                 },\r\n//                 \"config\": {\r\n//                     \"RollingConfig\": {\r\n//                         \"window\": \"float\"\r\n//                     }\r\n//                 },\r\n//                 \"inputs\": [\r\n//                     {\r\n//                         \"RandomMessage\": {\r\n//                             \"timestamp\": \"float\",\r\n//                             \"data\": \"np.ndarray\"\r\n//                         }\r\n//                     }\r\n//                 ],\r\n//                 \"outputs\": [\r\n//                     {\r\n//                         \"RandomMessage\": {\r\n//                             \"timestamp\": \"float\",\r\n//                             \"data\": \"np.ndarray\"\r\n//                         }\r\n//                     }\r\n//                 ]\r\n//             }\r\n//         }\r\n//     ],\r\n//     [\r\n//         {\r\n//             \"RollingAverager\": {\r\n//                 \"type\": \"Node\",\r\n//                 \"state\": {\r\n//                     \"RollingState\": {\r\n//                         \"messages\": \"List.RandomMessage\"\r\n//                     }\r\n//                 },\r\n//                 \"config\": {\r\n//                     \"RollingConfig\": {\r\n//                         \"window\": \"float\"\r\n//                     }\r\n//                 },\r\n//                 \"inputs\": [\r\n//                     {\r\n//                         \"RandomMessage\": {\r\n//                             \"timestamp\": \"float\",\r\n//                             \"data\": \"np.ndarray\"\r\n//                         }\r\n//                     }\r\n//                 ],\r\n//                 \"outputs\": [\r\n//                     {\r\n//                         \"RandomMessage\": {\r\n//                             \"timestamp\": \"float\",\r\n//                             \"data\": \"np.ndarray\"\r\n//                         }\r\n//                     }\r\n//                 ]\r\n//             }\r\n//         },\r\n//         {\r\n//             \"AveragedNoise\": {\r\n//                 \"type\": \"Group\",\r\n//                 \"config\": {\r\n//                     \"AveragedNoiseConfig\": {\r\n//                         \"sample_rate\": \"float\",\r\n//                         \"num_features\": \"int\",\r\n//                         \"window\": \"float\"\r\n//                     }\r\n//                 },\r\n//                 \"inputs\": [],\r\n//                 \"outputs\": [\r\n//                     {\r\n//                         \"RandomMessage\": {\r\n//                             \"timestamp\": \"float\",\r\n//                             \"data\": \"np.ndarray\"\r\n//                         }\r\n//                     }\r\n//                 ],\r\n//                 \"connections\": {\r\n//                     \"NoiseGenerator\": \"RollingAverager\",\r\n//                     \"RollingAverager\": \"AveragedNoise\"\r\n//                 }\r\n//             }\r\n//         }\r\n//     ],\r\n//     [\r\n//         {\r\n//             \"AveragedNoise\": {\r\n//                 \"type\": \"Group\",\r\n//                 \"config\": {\r\n//                     \"AveragedNoiseConfig\": {\r\n//                         \"sample_rate\": \"float\",\r\n//                         \"num_features\": \"int\",\r\n//                         \"window\": \"float\"\r\n//                     }\r\n//                 },\r\n//                 \"inputs\": [],\r\n//                 \"outputs\": [\r\n//                     {\r\n//                         \"RandomMessage\": {\r\n//                             \"timestamp\": \"float\",\r\n//                             \"data\": \"np.ndarray\"\r\n//                         }\r\n//                     }\r\n//                 ],\r\n//                 \"connections\": {\r\n//                     \"NoiseGenerator\": \"RollingAverager\",\r\n//                     \"RollingAverager\": \"AveragedNoise\"\r\n//                 }\r\n//             }\r\n//         },\r\n//         {\r\n//             \"Plot\": {\r\n//                 \"type\": \"Node\",\r\n//                 \"state\": \"PlotState\",\r\n//                 \"config\": \"PlotConfig\",\r\n//                 \"inputs\": [\r\n//                     \"RandomMessage\"\r\n//                 ],\r\n//                 \"outputs\": []\r\n//             }\r\n//         }\r\n//     ]\r\n// ]\r\n\r\n// const connections = dataToConnections(data);\r\n// const elements = connectionsToNodes(connections);\r\n\r\n\r\n// console.log(elements)\r\n// console.log(elements.length)"]},"metadata":{},"sourceType":"module"}