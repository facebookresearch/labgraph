{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"./lodash\");\n\nmodule.exports = Graph;\nvar DEFAULT_EDGE_NAME = \"\\x00\";\nvar GRAPH_NODE = \"\\x00\";\nvar EDGE_KEY_DELIM = \"\\x01\"; // Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\nfunction Graph(opts) {\n  this._isDirected = _.has(opts, \"directed\") ? opts.directed : true;\n  this._isMultigraph = _.has(opts, \"multigraph\") ? opts.multigraph : false;\n  this._isCompound = _.has(opts, \"compound\") ? opts.compound : false; // Label for the graph itself\n\n  this._label = undefined; // Defaults to be set when creating a new node\n\n  this._defaultNodeLabelFn = _.constant(undefined); // Defaults to be set when creating a new edge\n\n  this._defaultEdgeLabelFn = _.constant(undefined); // v -> label\n\n  this._nodes = {};\n\n  if (this._isCompound) {\n    // v -> parent\n    this._parent = {}; // v -> children\n\n    this._children = {};\n    this._children[GRAPH_NODE] = {};\n  } // v -> edgeObj\n\n\n  this._in = {}; // u -> v -> Number\n\n  this._preds = {}; // v -> edgeObj\n\n  this._out = {}; // v -> w -> Number\n\n  this._sucs = {}; // e -> edgeObj\n\n  this._edgeObjs = {}; // e -> label\n\n  this._edgeLabels = {};\n}\n/* Number of nodes in the graph. Should only be changed by the implementation. */\n\n\nGraph.prototype._nodeCount = 0;\n/* Number of edges in the graph. Should only be changed by the implementation. */\n\nGraph.prototype._edgeCount = 0;\n/* === Graph functions ========= */\n\nGraph.prototype.isDirected = function () {\n  return this._isDirected;\n};\n\nGraph.prototype.isMultigraph = function () {\n  return this._isMultigraph;\n};\n\nGraph.prototype.isCompound = function () {\n  return this._isCompound;\n};\n\nGraph.prototype.setGraph = function (label) {\n  this._label = label;\n  return this;\n};\n\nGraph.prototype.graph = function () {\n  return this._label;\n};\n/* === Node functions ========== */\n\n\nGraph.prototype.setDefaultNodeLabel = function (newDefault) {\n  if (!_.isFunction(newDefault)) {\n    newDefault = _.constant(newDefault);\n  }\n\n  this._defaultNodeLabelFn = newDefault;\n  return this;\n};\n\nGraph.prototype.nodeCount = function () {\n  return this._nodeCount;\n};\n\nGraph.prototype.nodes = function () {\n  return _.keys(this._nodes);\n};\n\nGraph.prototype.sources = function () {\n  var self = this;\n  return _.filter(this.nodes(), function (v) {\n    return _.isEmpty(self._in[v]);\n  });\n};\n\nGraph.prototype.sinks = function () {\n  var self = this;\n  return _.filter(this.nodes(), function (v) {\n    return _.isEmpty(self._out[v]);\n  });\n};\n\nGraph.prototype.setNodes = function (vs, value) {\n  var args = arguments;\n  var self = this;\n\n  _.each(vs, function (v) {\n    if (args.length > 1) {\n      self.setNode(v, value);\n    } else {\n      self.setNode(v);\n    }\n  });\n\n  return this;\n};\n\nGraph.prototype.setNode = function (v, value) {\n  if (_.has(this._nodes, v)) {\n    if (arguments.length > 1) {\n      this._nodes[v] = value;\n    }\n\n    return this;\n  }\n\n  this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n\n  if (this._isCompound) {\n    this._parent[v] = GRAPH_NODE;\n    this._children[v] = {};\n    this._children[GRAPH_NODE][v] = true;\n  }\n\n  this._in[v] = {};\n  this._preds[v] = {};\n  this._out[v] = {};\n  this._sucs[v] = {};\n  ++this._nodeCount;\n  return this;\n};\n\nGraph.prototype.node = function (v) {\n  return this._nodes[v];\n};\n\nGraph.prototype.hasNode = function (v) {\n  return _.has(this._nodes, v);\n};\n\nGraph.prototype.removeNode = function (v) {\n  var self = this;\n\n  if (_.has(this._nodes, v)) {\n    var removeEdge = function (e) {\n      self.removeEdge(self._edgeObjs[e]);\n    };\n\n    delete this._nodes[v];\n\n    if (this._isCompound) {\n      this._removeFromParentsChildList(v);\n\n      delete this._parent[v];\n\n      _.each(this.children(v), function (child) {\n        self.setParent(child);\n      });\n\n      delete this._children[v];\n    }\n\n    _.each(_.keys(this._in[v]), removeEdge);\n\n    delete this._in[v];\n    delete this._preds[v];\n\n    _.each(_.keys(this._out[v]), removeEdge);\n\n    delete this._out[v];\n    delete this._sucs[v];\n    --this._nodeCount;\n  }\n\n  return this;\n};\n\nGraph.prototype.setParent = function (v, parent) {\n  if (!this._isCompound) {\n    throw new Error(\"Cannot set parent in a non-compound graph\");\n  }\n\n  if (_.isUndefined(parent)) {\n    parent = GRAPH_NODE;\n  } else {\n    // Coerce parent to string\n    parent += \"\";\n\n    for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {\n      if (ancestor === v) {\n        throw new Error(\"Setting \" + parent + \" as parent of \" + v + \" would create a cycle\");\n      }\n    }\n\n    this.setNode(parent);\n  }\n\n  this.setNode(v);\n\n  this._removeFromParentsChildList(v);\n\n  this._parent[v] = parent;\n  this._children[parent][v] = true;\n  return this;\n};\n\nGraph.prototype._removeFromParentsChildList = function (v) {\n  delete this._children[this._parent[v]][v];\n};\n\nGraph.prototype.parent = function (v) {\n  if (this._isCompound) {\n    var parent = this._parent[v];\n\n    if (parent !== GRAPH_NODE) {\n      return parent;\n    }\n  }\n};\n\nGraph.prototype.children = function (v) {\n  if (_.isUndefined(v)) {\n    v = GRAPH_NODE;\n  }\n\n  if (this._isCompound) {\n    var children = this._children[v];\n\n    if (children) {\n      return _.keys(children);\n    }\n  } else if (v === GRAPH_NODE) {\n    return this.nodes();\n  } else if (this.hasNode(v)) {\n    return [];\n  }\n};\n\nGraph.prototype.predecessors = function (v) {\n  var predsV = this._preds[v];\n\n  if (predsV) {\n    return _.keys(predsV);\n  }\n};\n\nGraph.prototype.successors = function (v) {\n  var sucsV = this._sucs[v];\n\n  if (sucsV) {\n    return _.keys(sucsV);\n  }\n};\n\nGraph.prototype.neighbors = function (v) {\n  var preds = this.predecessors(v);\n\n  if (preds) {\n    return _.union(preds, this.successors(v));\n  }\n};\n\nGraph.prototype.isLeaf = function (v) {\n  var neighbors;\n\n  if (this.isDirected()) {\n    neighbors = this.successors(v);\n  } else {\n    neighbors = this.neighbors(v);\n  }\n\n  return neighbors.length === 0;\n};\n\nGraph.prototype.filterNodes = function (filter) {\n  var copy = new this.constructor({\n    directed: this._isDirected,\n    multigraph: this._isMultigraph,\n    compound: this._isCompound\n  });\n  copy.setGraph(this.graph());\n  var self = this;\n\n  _.each(this._nodes, function (value, v) {\n    if (filter(v)) {\n      copy.setNode(v, value);\n    }\n  });\n\n  _.each(this._edgeObjs, function (e) {\n    if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n      copy.setEdge(e, self.edge(e));\n    }\n  });\n\n  var parents = {};\n\n  function findParent(v) {\n    var parent = self.parent(v);\n\n    if (parent === undefined || copy.hasNode(parent)) {\n      parents[v] = parent;\n      return parent;\n    } else if (parent in parents) {\n      return parents[parent];\n    } else {\n      return findParent(parent);\n    }\n  }\n\n  if (this._isCompound) {\n    _.each(copy.nodes(), function (v) {\n      copy.setParent(v, findParent(v));\n    });\n  }\n\n  return copy;\n};\n/* === Edge functions ========== */\n\n\nGraph.prototype.setDefaultEdgeLabel = function (newDefault) {\n  if (!_.isFunction(newDefault)) {\n    newDefault = _.constant(newDefault);\n  }\n\n  this._defaultEdgeLabelFn = newDefault;\n  return this;\n};\n\nGraph.prototype.edgeCount = function () {\n  return this._edgeCount;\n};\n\nGraph.prototype.edges = function () {\n  return _.values(this._edgeObjs);\n};\n\nGraph.prototype.setPath = function (vs, value) {\n  var self = this;\n  var args = arguments;\n\n  _.reduce(vs, function (v, w) {\n    if (args.length > 1) {\n      self.setEdge(v, w, value);\n    } else {\n      self.setEdge(v, w);\n    }\n\n    return w;\n  });\n\n  return this;\n};\n/*\n * setEdge(v, w, [value, [name]])\n * setEdge({ v, w, [name] }, [value])\n */\n\n\nGraph.prototype.setEdge = function () {\n  var v, w, name, value;\n  var valueSpecified = false;\n  var arg0 = arguments[0];\n\n  if (typeof arg0 === \"object\" && arg0 !== null && \"v\" in arg0) {\n    v = arg0.v;\n    w = arg0.w;\n    name = arg0.name;\n\n    if (arguments.length === 2) {\n      value = arguments[1];\n      valueSpecified = true;\n    }\n  } else {\n    v = arg0;\n    w = arguments[1];\n    name = arguments[3];\n\n    if (arguments.length > 2) {\n      value = arguments[2];\n      valueSpecified = true;\n    }\n  }\n\n  v = \"\" + v;\n  w = \"\" + w;\n\n  if (!_.isUndefined(name)) {\n    name = \"\" + name;\n  }\n\n  var e = edgeArgsToId(this._isDirected, v, w, name);\n\n  if (_.has(this._edgeLabels, e)) {\n    if (valueSpecified) {\n      this._edgeLabels[e] = value;\n    }\n\n    return this;\n  }\n\n  if (!_.isUndefined(name) && !this._isMultigraph) {\n    throw new Error(\"Cannot set a named edge when isMultigraph = false\");\n  } // It didn't exist, so we need to create it.\n  // First ensure the nodes exist.\n\n\n  this.setNode(v);\n  this.setNode(w);\n  this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n  var edgeObj = edgeArgsToObj(this._isDirected, v, w, name); // Ensure we add undirected edges in a consistent way.\n\n  v = edgeObj.v;\n  w = edgeObj.w;\n  Object.freeze(edgeObj);\n  this._edgeObjs[e] = edgeObj;\n  incrementOrInitEntry(this._preds[w], v);\n  incrementOrInitEntry(this._sucs[v], w);\n  this._in[w][e] = edgeObj;\n  this._out[v][e] = edgeObj;\n  this._edgeCount++;\n  return this;\n};\n\nGraph.prototype.edge = function (v, w, name) {\n  var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);\n  return this._edgeLabels[e];\n};\n\nGraph.prototype.hasEdge = function (v, w, name) {\n  var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);\n  return _.has(this._edgeLabels, e);\n};\n\nGraph.prototype.removeEdge = function (v, w, name) {\n  var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);\n  var edge = this._edgeObjs[e];\n\n  if (edge) {\n    v = edge.v;\n    w = edge.w;\n    delete this._edgeLabels[e];\n    delete this._edgeObjs[e];\n    decrementOrRemoveEntry(this._preds[w], v);\n    decrementOrRemoveEntry(this._sucs[v], w);\n    delete this._in[w][e];\n    delete this._out[v][e];\n    this._edgeCount--;\n  }\n\n  return this;\n};\n\nGraph.prototype.inEdges = function (v, u) {\n  var inV = this._in[v];\n\n  if (inV) {\n    var edges = _.values(inV);\n\n    if (!u) {\n      return edges;\n    }\n\n    return _.filter(edges, function (edge) {\n      return edge.v === u;\n    });\n  }\n};\n\nGraph.prototype.outEdges = function (v, w) {\n  var outV = this._out[v];\n\n  if (outV) {\n    var edges = _.values(outV);\n\n    if (!w) {\n      return edges;\n    }\n\n    return _.filter(edges, function (edge) {\n      return edge.w === w;\n    });\n  }\n};\n\nGraph.prototype.nodeEdges = function (v, w) {\n  var inEdges = this.inEdges(v, w);\n\n  if (inEdges) {\n    return inEdges.concat(this.outEdges(v, w));\n  }\n};\n\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (! --map[k]) {\n    delete map[k];\n  }\n}\n\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = \"\" + v_;\n  var w = \"\" + w_;\n\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = \"\" + v_;\n  var w = \"\" + w_;\n\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var edgeObj = {\n    v: v,\n    w: w\n  };\n\n  if (name) {\n    edgeObj.name = name;\n  }\n\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/node_modules/graphlib/lib/graph.js"],"names":["_","require","module","exports","Graph","DEFAULT_EDGE_NAME","GRAPH_NODE","EDGE_KEY_DELIM","opts","_isDirected","has","directed","_isMultigraph","multigraph","_isCompound","compound","_label","undefined","_defaultNodeLabelFn","constant","_defaultEdgeLabelFn","_nodes","_parent","_children","_in","_preds","_out","_sucs","_edgeObjs","_edgeLabels","prototype","_nodeCount","_edgeCount","isDirected","isMultigraph","isCompound","setGraph","label","graph","setDefaultNodeLabel","newDefault","isFunction","nodeCount","nodes","keys","sources","self","filter","v","isEmpty","sinks","setNodes","vs","value","args","arguments","each","length","setNode","node","hasNode","removeNode","removeEdge","e","_removeFromParentsChildList","children","child","setParent","parent","Error","isUndefined","ancestor","predecessors","predsV","successors","sucsV","neighbors","preds","union","isLeaf","filterNodes","copy","constructor","w","setEdge","edge","parents","findParent","setDefaultEdgeLabel","edgeCount","edges","values","setPath","reduce","name","valueSpecified","arg0","edgeArgsToId","edgeObj","edgeArgsToObj","Object","freeze","incrementOrInitEntry","edgeObjToId","hasEdge","decrementOrRemoveEntry","inEdges","u","inV","outEdges","outV","nodeEdges","concat","map","k","v_","w_","tmp"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _ = require(\"./lodash\");\n\nmodule.exports = Graph;\n\nvar DEFAULT_EDGE_NAME = \"\\x00\";\nvar GRAPH_NODE = \"\\x00\";\nvar EDGE_KEY_DELIM = \"\\x01\";\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\nfunction Graph(opts) {\n  this._isDirected = _.has(opts, \"directed\") ? opts.directed : true;\n  this._isMultigraph = _.has(opts, \"multigraph\") ? opts.multigraph : false;\n  this._isCompound = _.has(opts, \"compound\") ? opts.compound : false;\n\n  // Label for the graph itself\n  this._label = undefined;\n\n  // Defaults to be set when creating a new node\n  this._defaultNodeLabelFn = _.constant(undefined);\n\n  // Defaults to be set when creating a new edge\n  this._defaultEdgeLabelFn = _.constant(undefined);\n\n  // v -> label\n  this._nodes = {};\n\n  if (this._isCompound) {\n    // v -> parent\n    this._parent = {};\n\n    // v -> children\n    this._children = {};\n    this._children[GRAPH_NODE] = {};\n  }\n\n  // v -> edgeObj\n  this._in = {};\n\n  // u -> v -> Number\n  this._preds = {};\n\n  // v -> edgeObj\n  this._out = {};\n\n  // v -> w -> Number\n  this._sucs = {};\n\n  // e -> edgeObj\n  this._edgeObjs = {};\n\n  // e -> label\n  this._edgeLabels = {};\n}\n\n/* Number of nodes in the graph. Should only be changed by the implementation. */\nGraph.prototype._nodeCount = 0;\n\n/* Number of edges in the graph. Should only be changed by the implementation. */\nGraph.prototype._edgeCount = 0;\n\n\n/* === Graph functions ========= */\n\nGraph.prototype.isDirected = function() {\n  return this._isDirected;\n};\n\nGraph.prototype.isMultigraph = function() {\n  return this._isMultigraph;\n};\n\nGraph.prototype.isCompound = function() {\n  return this._isCompound;\n};\n\nGraph.prototype.setGraph = function(label) {\n  this._label = label;\n  return this;\n};\n\nGraph.prototype.graph = function() {\n  return this._label;\n};\n\n\n/* === Node functions ========== */\n\nGraph.prototype.setDefaultNodeLabel = function(newDefault) {\n  if (!_.isFunction(newDefault)) {\n    newDefault = _.constant(newDefault);\n  }\n  this._defaultNodeLabelFn = newDefault;\n  return this;\n};\n\nGraph.prototype.nodeCount = function() {\n  return this._nodeCount;\n};\n\nGraph.prototype.nodes = function() {\n  return _.keys(this._nodes);\n};\n\nGraph.prototype.sources = function() {\n  var self = this;\n  return _.filter(this.nodes(), function(v) {\n    return _.isEmpty(self._in[v]);\n  });\n};\n\nGraph.prototype.sinks = function() {\n  var self = this;\n  return _.filter(this.nodes(), function(v) {\n    return _.isEmpty(self._out[v]);\n  });\n};\n\nGraph.prototype.setNodes = function(vs, value) {\n  var args = arguments;\n  var self = this;\n  _.each(vs, function(v) {\n    if (args.length > 1) {\n      self.setNode(v, value);\n    } else {\n      self.setNode(v);\n    }\n  });\n  return this;\n};\n\nGraph.prototype.setNode = function(v, value) {\n  if (_.has(this._nodes, v)) {\n    if (arguments.length > 1) {\n      this._nodes[v] = value;\n    }\n    return this;\n  }\n\n  this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n  if (this._isCompound) {\n    this._parent[v] = GRAPH_NODE;\n    this._children[v] = {};\n    this._children[GRAPH_NODE][v] = true;\n  }\n  this._in[v] = {};\n  this._preds[v] = {};\n  this._out[v] = {};\n  this._sucs[v] = {};\n  ++this._nodeCount;\n  return this;\n};\n\nGraph.prototype.node = function(v) {\n  return this._nodes[v];\n};\n\nGraph.prototype.hasNode = function(v) {\n  return _.has(this._nodes, v);\n};\n\nGraph.prototype.removeNode =  function(v) {\n  var self = this;\n  if (_.has(this._nodes, v)) {\n    var removeEdge = function(e) { self.removeEdge(self._edgeObjs[e]); };\n    delete this._nodes[v];\n    if (this._isCompound) {\n      this._removeFromParentsChildList(v);\n      delete this._parent[v];\n      _.each(this.children(v), function(child) {\n        self.setParent(child);\n      });\n      delete this._children[v];\n    }\n    _.each(_.keys(this._in[v]), removeEdge);\n    delete this._in[v];\n    delete this._preds[v];\n    _.each(_.keys(this._out[v]), removeEdge);\n    delete this._out[v];\n    delete this._sucs[v];\n    --this._nodeCount;\n  }\n  return this;\n};\n\nGraph.prototype.setParent = function(v, parent) {\n  if (!this._isCompound) {\n    throw new Error(\"Cannot set parent in a non-compound graph\");\n  }\n\n  if (_.isUndefined(parent)) {\n    parent = GRAPH_NODE;\n  } else {\n    // Coerce parent to string\n    parent += \"\";\n    for (var ancestor = parent;\n      !_.isUndefined(ancestor);\n      ancestor = this.parent(ancestor)) {\n      if (ancestor === v) {\n        throw new Error(\"Setting \" + parent+ \" as parent of \" + v +\n                        \" would create a cycle\");\n      }\n    }\n\n    this.setNode(parent);\n  }\n\n  this.setNode(v);\n  this._removeFromParentsChildList(v);\n  this._parent[v] = parent;\n  this._children[parent][v] = true;\n  return this;\n};\n\nGraph.prototype._removeFromParentsChildList = function(v) {\n  delete this._children[this._parent[v]][v];\n};\n\nGraph.prototype.parent = function(v) {\n  if (this._isCompound) {\n    var parent = this._parent[v];\n    if (parent !== GRAPH_NODE) {\n      return parent;\n    }\n  }\n};\n\nGraph.prototype.children = function(v) {\n  if (_.isUndefined(v)) {\n    v = GRAPH_NODE;\n  }\n\n  if (this._isCompound) {\n    var children = this._children[v];\n    if (children) {\n      return _.keys(children);\n    }\n  } else if (v === GRAPH_NODE) {\n    return this.nodes();\n  } else if (this.hasNode(v)) {\n    return [];\n  }\n};\n\nGraph.prototype.predecessors = function(v) {\n  var predsV = this._preds[v];\n  if (predsV) {\n    return _.keys(predsV);\n  }\n};\n\nGraph.prototype.successors = function(v) {\n  var sucsV = this._sucs[v];\n  if (sucsV) {\n    return _.keys(sucsV);\n  }\n};\n\nGraph.prototype.neighbors = function(v) {\n  var preds = this.predecessors(v);\n  if (preds) {\n    return _.union(preds, this.successors(v));\n  }\n};\n\nGraph.prototype.isLeaf = function (v) {\n  var neighbors;\n  if (this.isDirected()) {\n    neighbors = this.successors(v);\n  } else {\n    neighbors = this.neighbors(v);\n  }\n  return neighbors.length === 0;\n};\n\nGraph.prototype.filterNodes = function(filter) {\n  var copy = new this.constructor({\n    directed: this._isDirected,\n    multigraph: this._isMultigraph,\n    compound: this._isCompound\n  });\n\n  copy.setGraph(this.graph());\n\n  var self = this;\n  _.each(this._nodes, function(value, v) {\n    if (filter(v)) {\n      copy.setNode(v, value);\n    }\n  });\n\n  _.each(this._edgeObjs, function(e) {\n    if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n      copy.setEdge(e, self.edge(e));\n    }\n  });\n\n  var parents = {};\n  function findParent(v) {\n    var parent = self.parent(v);\n    if (parent === undefined || copy.hasNode(parent)) {\n      parents[v] = parent;\n      return parent;\n    } else if (parent in parents) {\n      return parents[parent];\n    } else {\n      return findParent(parent);\n    }\n  }\n\n  if (this._isCompound) {\n    _.each(copy.nodes(), function(v) {\n      copy.setParent(v, findParent(v));\n    });\n  }\n\n  return copy;\n};\n\n/* === Edge functions ========== */\n\nGraph.prototype.setDefaultEdgeLabel = function(newDefault) {\n  if (!_.isFunction(newDefault)) {\n    newDefault = _.constant(newDefault);\n  }\n  this._defaultEdgeLabelFn = newDefault;\n  return this;\n};\n\nGraph.prototype.edgeCount = function() {\n  return this._edgeCount;\n};\n\nGraph.prototype.edges = function() {\n  return _.values(this._edgeObjs);\n};\n\nGraph.prototype.setPath = function(vs, value) {\n  var self = this;\n  var args = arguments;\n  _.reduce(vs, function(v, w) {\n    if (args.length > 1) {\n      self.setEdge(v, w, value);\n    } else {\n      self.setEdge(v, w);\n    }\n    return w;\n  });\n  return this;\n};\n\n/*\n * setEdge(v, w, [value, [name]])\n * setEdge({ v, w, [name] }, [value])\n */\nGraph.prototype.setEdge = function() {\n  var v, w, name, value;\n  var valueSpecified = false;\n  var arg0 = arguments[0];\n\n  if (typeof arg0 === \"object\" && arg0 !== null && \"v\" in arg0) {\n    v = arg0.v;\n    w = arg0.w;\n    name = arg0.name;\n    if (arguments.length === 2) {\n      value = arguments[1];\n      valueSpecified = true;\n    }\n  } else {\n    v = arg0;\n    w = arguments[1];\n    name = arguments[3];\n    if (arguments.length > 2) {\n      value = arguments[2];\n      valueSpecified = true;\n    }\n  }\n\n  v = \"\" + v;\n  w = \"\" + w;\n  if (!_.isUndefined(name)) {\n    name = \"\" + name;\n  }\n\n  var e = edgeArgsToId(this._isDirected, v, w, name);\n  if (_.has(this._edgeLabels, e)) {\n    if (valueSpecified) {\n      this._edgeLabels[e] = value;\n    }\n    return this;\n  }\n\n  if (!_.isUndefined(name) && !this._isMultigraph) {\n    throw new Error(\"Cannot set a named edge when isMultigraph = false\");\n  }\n\n  // It didn't exist, so we need to create it.\n  // First ensure the nodes exist.\n  this.setNode(v);\n  this.setNode(w);\n\n  this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n\n  var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);\n  // Ensure we add undirected edges in a consistent way.\n  v = edgeObj.v;\n  w = edgeObj.w;\n\n  Object.freeze(edgeObj);\n  this._edgeObjs[e] = edgeObj;\n  incrementOrInitEntry(this._preds[w], v);\n  incrementOrInitEntry(this._sucs[v], w);\n  this._in[w][e] = edgeObj;\n  this._out[v][e] = edgeObj;\n  this._edgeCount++;\n  return this;\n};\n\nGraph.prototype.edge = function(v, w, name) {\n  var e = (arguments.length === 1\n    ? edgeObjToId(this._isDirected, arguments[0])\n    : edgeArgsToId(this._isDirected, v, w, name));\n  return this._edgeLabels[e];\n};\n\nGraph.prototype.hasEdge = function(v, w, name) {\n  var e = (arguments.length === 1\n    ? edgeObjToId(this._isDirected, arguments[0])\n    : edgeArgsToId(this._isDirected, v, w, name));\n  return _.has(this._edgeLabels, e);\n};\n\nGraph.prototype.removeEdge = function(v, w, name) {\n  var e = (arguments.length === 1\n    ? edgeObjToId(this._isDirected, arguments[0])\n    : edgeArgsToId(this._isDirected, v, w, name));\n  var edge = this._edgeObjs[e];\n  if (edge) {\n    v = edge.v;\n    w = edge.w;\n    delete this._edgeLabels[e];\n    delete this._edgeObjs[e];\n    decrementOrRemoveEntry(this._preds[w], v);\n    decrementOrRemoveEntry(this._sucs[v], w);\n    delete this._in[w][e];\n    delete this._out[v][e];\n    this._edgeCount--;\n  }\n  return this;\n};\n\nGraph.prototype.inEdges = function(v, u) {\n  var inV = this._in[v];\n  if (inV) {\n    var edges = _.values(inV);\n    if (!u) {\n      return edges;\n    }\n    return _.filter(edges, function(edge) { return edge.v === u; });\n  }\n};\n\nGraph.prototype.outEdges = function(v, w) {\n  var outV = this._out[v];\n  if (outV) {\n    var edges = _.values(outV);\n    if (!w) {\n      return edges;\n    }\n    return _.filter(edges, function(edge) { return edge.w === w; });\n  }\n};\n\nGraph.prototype.nodeEdges = function(v, w) {\n  var inEdges = this.inEdges(v, w);\n  if (inEdges) {\n    return inEdges.concat(this.outEdges(v, w));\n  }\n};\n\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (!--map[k]) { delete map[k]; }\n}\n\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = \"\" + v_;\n  var w = \"\" + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM +\n             (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = \"\" + v_;\n  var w = \"\" + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var edgeObj =  { v: v, w: w };\n  if (name) {\n    edgeObj.name = name;\n  }\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}\n"]},"metadata":{},"sourceType":"script"}