{"ast":null,"code":"/* eslint \"no-console\": off */\n\"use strict\";\n\nvar _ = require(\"./lodash\");\n\nvar Graph = require(\"./graphlib\").Graph;\n\nmodule.exports = {\n  addDummyNode: addDummyNode,\n  simplify: simplify,\n  asNonCompoundGraph: asNonCompoundGraph,\n  successorWeights: successorWeights,\n  predecessorWeights: predecessorWeights,\n  intersectRect: intersectRect,\n  buildLayerMatrix: buildLayerMatrix,\n  normalizeRanks: normalizeRanks,\n  removeEmptyRanks: removeEmptyRanks,\n  addBorderNode: addBorderNode,\n  maxRank: maxRank,\n  partition: partition,\n  time: time,\n  notime: notime\n};\n/*\n * Adds a dummy node to the graph and return v.\n */\n\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\n\n\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || {\n      weight: 0,\n      minlen: 1\n    };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen)\n    });\n  });\n\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({\n    multigraph: g.isMultigraph()\n  }).setGraph(g.graph());\n\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n\n    return sucs;\n  });\n\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n\n    return preds;\n  });\n\n  return _.zipObject(g.nodes(), weightMap);\n}\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\n\n\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y; // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error(\"Not possible to find intersection inside of the rectangle\");\n  }\n\n  var sx, sy;\n\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n\n    sx = h * dx / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n\n    sx = w;\n    sy = w * dy / dx;\n  }\n\n  return {\n    x: x + sx,\n    y: y + sy\n  };\n}\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\n\n\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n\n  return layering;\n}\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\n\n\nfunction normalizeRanks(g) {\n  var min = _.min(_.map(g.nodes(), function (v) {\n    return g.node(v).rank;\n  }));\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n\n    if (_.has(node, \"rank\")) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(_.map(g.nodes(), function (v) {\n    return g.node(v).rank;\n  }));\n\n  var layers = [];\n\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0\n  };\n\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n\n  return addDummyNode(g, \"border\", node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(_.map(g.nodes(), function (v) {\n    var rank = g.node(v).rank;\n\n    if (!_.isUndefined(rank)) {\n      return rank;\n    }\n  }));\n}\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\n\n\nfunction partition(collection, fn) {\n  var result = {\n    lhs: [],\n    rhs: []\n  };\n\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n\n  return result;\n}\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\n\n\nfunction time(name, fn) {\n  var start = _.now();\n\n  try {\n    return fn();\n  } finally {\n    console.log(name + \" time: \" + (_.now() - start) + \"ms\");\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/node_modules/dagre/lib/util.js"],"names":["_","require","Graph","module","exports","addDummyNode","simplify","asNonCompoundGraph","successorWeights","predecessorWeights","intersectRect","buildLayerMatrix","normalizeRanks","removeEmptyRanks","addBorderNode","maxRank","partition","time","notime","g","type","attrs","name","v","uniqueId","hasNode","dummy","setNode","simplified","setGraph","graph","forEach","nodes","node","edges","e","simpleLabel","edge","w","weight","minlen","label","setEdge","Math","max","multigraph","isMultigraph","children","length","weightMap","map","sucs","outEdges","zipObject","preds","inEdges","rect","point","x","y","dx","dy","width","h","height","Error","sx","sy","abs","layering","range","rank","isUndefined","order","min","has","offset","layers","push","delta","nodeRankFactor","vs","i","prefix","arguments","collection","fn","result","lhs","rhs","value","start","now","console","log"],"mappings":"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","sourcesContent":["/* eslint \"no-console\": off */\n\n\"use strict\";\n\nvar _ = require(\"./lodash\");\nvar Graph = require(\"./graphlib\").Graph;\n\nmodule.exports = {\n  addDummyNode: addDummyNode,\n  simplify: simplify,\n  asNonCompoundGraph: asNonCompoundGraph,\n  successorWeights: successorWeights,\n  predecessorWeights: predecessorWeights,\n  intersectRect: intersectRect,\n  buildLayerMatrix: buildLayerMatrix,\n  normalizeRanks: normalizeRanks,\n  removeEmptyRanks: removeEmptyRanks,\n  addBorderNode: addBorderNode,\n  maxRank: maxRank,\n  partition: partition,\n  time: time,\n  notime: notime\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function(v) { simplified.setNode(v, g.node(v)); });\n  _.forEach(g.edges(), function(e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen)\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function(v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function(e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function(v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function(e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function(v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function(e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error(\"Not possible to find intersection inside of the rectangle\");\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = h * dx / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = w * dy / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function() { return []; });\n  _.forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(_.map(g.nodes(), function(v) { return g.node(v).rank; }));\n  _.forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (_.has(node, \"rank\")) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(_.map(g.nodes(), function(v) { return g.node(v).rank; }));\n\n  var layers = [];\n  _.forEach(g.nodes(), function(v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function(vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function(v) { g.node(v).rank += delta; });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, \"border\", node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(_.map(g.nodes(), function(v) {\n    var rank = g.node(v).rank;\n    if (!_.isUndefined(rank)) {\n      return rank;\n    }\n  }));\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function(value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + \" time: \" + (_.now() - start) + \"ms\");\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n"]},"metadata":{},"sourceType":"script"}