{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zenak\\\\Desktop\\\\labgraph_monitor\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport ReactFlow, { addEdge, MiniMap, Controls } from 'react-flow-renderer';\nimport { dataToConnections, connectionsToNodes, dataToObjects } from './helper'; // sample connections array: {'NoiseGenerator': ['RollingAverager'], 'RollingAverager': ['AveragedNoise'], 'AveragedNoise': ['Plot']}\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InteractionGraph = () => {\n  _s();\n\n  const [node_name, setName] = useState(\"None\");\n  const [connections, setConnections] = useState([]);\n  const [elements, setElements] = useState([]);\n  const [nodeObjects, setNodeObjects] = useState([]);\n  const [type, setType] = useState('None'); // getting the node that the user is clicking \n\n  const onElementClick = (event, element) => {\n    setName(element.id);\n    setType(nodeObjects[element.id].type);\n    console.log(\"node\", node_name);\n  }; // receiving the messages from server \n\n\n  useEffect(() => {\n    // connecting to the server \n    const client = new W3CWebSocket('ws://localhost:9000');\n\n    client.onopen = () => {\n      console.log('connected');\n      client.send(JSON.stringify({\n        \"api_version\": \"0.1\",\n        \"api_request\": {\n          \"request_id\": 1,\n          \"start_stream_request\": {\n            \"stream_id\": \"LABGRAPH.MONITOR\",\n            \"labgraph.monitor\": {}\n          }\n        }\n      }));\n    };\n\n    client.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data);\n\n      if (dataFromServer.stream_batch) {\n        const data_array = dataFromServer.stream_batch[\"labgraph.monitor\"].samples[0].data;\n        const connections = dataToConnections(data_array);\n        const elements = connectionsToNodes(connections);\n        const nodeObjects = dataToObjects(data_array);\n        setElements(elements);\n        setConnections(connections);\n        setNodeObjects(nodeObjects);\n        console.log(\"connection\", connections);\n        console.log(\"server message received \", data_array);\n      }\n    };\n\n    return () => {\n      client.close();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Node\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: node_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 800\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        elements: elements,\n        onElementClick: onElementClick,\n        children: /*#__PURE__*/_jsxDEV(MiniMap, {\n          nodeStrokeColor: n => {\n            var _n$style;\n\n            if ((_n$style = n.style) === null || _n$style === void 0 ? void 0 : _n$style.background) return n.style.background;\n            if (n.type === 'input') return '#0041d0';\n            if (n.type === 'output') return '#ff0072';\n            if (n.type === 'default') return '#1a192b';\n            return '#eee';\n          },\n          nodeColor: n => {\n            var _n$style2;\n\n            if ((_n$style2 = n.style) === null || _n$style2 === void 0 ? void 0 : _n$style2.background) return n.style.background;\n            return '#AB92B3';\n          },\n          nodeBorderRadius: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 3\n  }, this);\n};\n\n_s(InteractionGraph, \"kF6JY8onXijG4+lBRo/ISXtvhAc=\");\n\n_c = InteractionGraph;\nexport default InteractionGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"InteractionGraph\");","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/src/App.js"],"names":["React","useState","useEffect","w3cwebsocket","W3CWebSocket","ReactFlow","addEdge","MiniMap","Controls","dataToConnections","connectionsToNodes","dataToObjects","InteractionGraph","node_name","setName","connections","setConnections","elements","setElements","nodeObjects","setNodeObjects","type","setType","onElementClick","event","element","id","console","log","client","onopen","send","JSON","stringify","onmessage","message","dataFromServer","parse","data","stream_batch","data_array","samples","close","height","n","style","background"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport ReactFlow, { addEdge, MiniMap, Controls } from 'react-flow-renderer';\r\nimport { dataToConnections, connectionsToNodes, dataToObjects } from './helper';\r\n\r\n// sample connections array: {'NoiseGenerator': ['RollingAverager'], 'RollingAverager': ['AveragedNoise'], 'AveragedNoise': ['Plot']}\r\n\r\nconst InteractionGraph = () => {\r\n  const [node_name, setName] = useState(\"None\");\r\n  const [connections, setConnections] = useState([]);\r\n  const [elements, setElements] = useState([]);\r\n  const [nodeObjects, setNodeObjects] = useState([]);\r\n  const [type, setType] = useState('None')\r\n\r\n  // getting the node that the user is clicking \r\n  const onElementClick = (event, element) => {\r\n    setName(element.id)\r\n    setType(nodeObjects[element.id].type)\r\n    console.log(\"node\", node_name)\r\n  };\r\n\r\n  // receiving the messages from server \r\n  useEffect(() => {\r\n    // connecting to the server \r\n    const client = new W3CWebSocket('ws://localhost:9000');\r\n\r\n    client.onopen = () => {\r\n      console.log('connected');\r\n      client.send(JSON.stringify({\r\n        \"api_version\": \"0.1\",\r\n        \"api_request\": {\r\n          \"request_id\": 1,\r\n          \"start_stream_request\": {\r\n            \"stream_id\": \"LABGRAPH.MONITOR\",\r\n             \"labgraph.monitor\": {\r\n             }\r\n          }\r\n        }\r\n     }))\r\n    };\r\n\r\n    client.onmessage = (message) => {\r\n      const dataFromServer = JSON.parse(message.data);\r\n      if (dataFromServer.stream_batch){\r\n        const data_array = dataFromServer.stream_batch[\"labgraph.monitor\"].samples[0].data;\r\n        const connections = dataToConnections(data_array);\r\n        const elements = connectionsToNodes(connections);\r\n        const nodeObjects = dataToObjects(data_array);\r\n        setElements(elements);\r\n        setConnections(connections);\r\n        setNodeObjects(nodeObjects);\r\n        console.log(\"connection\", connections);\r\n        console.log(\"server message received \", data_array)\r\n      }\r\n    };\r\n\r\n    return () => {\r\n      client.close();\r\n    }\r\n  }, []);\r\n\r\n  return(\r\n  <div>\r\n    <div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Node</th>\r\n            <th>Type</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>{node_name}</td>\r\n            <td>{type}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n    <div style={{ height: 800 }}> \r\n    <ReactFlow \r\n    elements={elements}\r\n    onElementClick={onElementClick}\r\n    >\r\n    <MiniMap\r\n    nodeStrokeColor={(n) => {\r\n          if (n.style?.background) return n.style.background;\r\n          if (n.type === 'input') return '#0041d0';\r\n          if (n.type === 'output') return '#ff0072';\r\n          if (n.type === 'default') return '#1a192b';\r\n\r\n          return '#eee';\r\n    }}\r\n    nodeColor={(n) => {\r\n      if (n.style?.background) return n.style.background;\r\n\r\n      return '#AB92B3';\r\n    }}\r\n    nodeBorderRadius={2}\r\n    />\r\n    </ReactFlow>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  \r\n  )\r\n};\r\n\r\nexport default InteractionGraph;"]},"metadata":{},"sourceType":"module"}