{"ast":null,"code":"var _ = require(\"../lodash\");\n\nvar PriorityQueue = require(\"../data/priority-queue\");\n\nmodule.exports = dijkstra;\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(g, String(source), weightFn || DEFAULT_WEIGHT_FUNC, edgeFn || function (v) {\n    return g.outEdges(v);\n  });\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function (edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\"dijkstra does not allow negative edge weights. \" + \"Bad edge: \" + edge + \" Weight: \" + weight);\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function (v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = {\n      distance: distance\n    };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/node_modules/graphlib/lib/alg/dijkstra.js"],"names":["_","require","PriorityQueue","module","exports","dijkstra","DEFAULT_WEIGHT_FUNC","constant","g","source","weightFn","edgeFn","runDijkstra","String","v","outEdges","results","pq","vEntry","updateNeighbors","edge","w","wEntry","weight","distance","Error","predecessor","decrease","nodes","forEach","Number","POSITIVE_INFINITY","add","size","removeMin"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,WAAD,CAAf;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,wBAAD,CAA3B;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,QAAjB;;AAEA,IAAIC,mBAAmB,GAAGN,CAAC,CAACO,QAAF,CAAW,CAAX,CAA1B;;AAEA,SAASF,QAAT,CAAkBG,CAAlB,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,MAAvC,EAA+C;AAC7C,SAAOC,WAAW,CAACJ,CAAD,EAAIK,MAAM,CAACJ,MAAD,CAAV,EAChBC,QAAQ,IAAIJ,mBADI,EAEhBK,MAAM,IAAI,UAASG,CAAT,EAAY;AAAE,WAAON,CAAC,CAACO,QAAF,CAAWD,CAAX,CAAP;AAAuB,GAF/B,CAAlB;AAGD;;AAED,SAASF,WAAT,CAAqBJ,CAArB,EAAwBC,MAAxB,EAAgCC,QAAhC,EAA0CC,MAA1C,EAAkD;AAChD,MAAIK,OAAO,GAAG,EAAd;AACA,MAAIC,EAAE,GAAG,IAAIf,aAAJ,EAAT;AACA,MAAIY,CAAJ,EAAOI,MAAP;;AAEA,MAAIC,eAAe,GAAG,UAASC,IAAT,EAAe;AACnC,QAAIC,CAAC,GAAGD,IAAI,CAACN,CAAL,KAAWA,CAAX,GAAeM,IAAI,CAACN,CAApB,GAAwBM,IAAI,CAACC,CAArC;AACA,QAAIC,MAAM,GAAGN,OAAO,CAACK,CAAD,CAApB;AACA,QAAIE,MAAM,GAAGb,QAAQ,CAACU,IAAD,CAArB;AACA,QAAII,QAAQ,GAAGN,MAAM,CAACM,QAAP,GAAkBD,MAAjC;;AAEA,QAAIA,MAAM,GAAG,CAAb,EAAgB;AACd,YAAM,IAAIE,KAAJ,CAAU,oDACA,YADA,GACeL,IADf,GACsB,WADtB,GACoCG,MAD9C,CAAN;AAED;;AAED,QAAIC,QAAQ,GAAGF,MAAM,CAACE,QAAtB,EAAgC;AAC9BF,MAAAA,MAAM,CAACE,QAAP,GAAkBA,QAAlB;AACAF,MAAAA,MAAM,CAACI,WAAP,GAAqBZ,CAArB;AACAG,MAAAA,EAAE,CAACU,QAAH,CAAYN,CAAZ,EAAeG,QAAf;AACD;AACF,GAhBD;;AAkBAhB,EAAAA,CAAC,CAACoB,KAAF,GAAUC,OAAV,CAAkB,UAASf,CAAT,EAAY;AAC5B,QAAIU,QAAQ,GAAGV,CAAC,KAAKL,MAAN,GAAe,CAAf,GAAmBqB,MAAM,CAACC,iBAAzC;AACAf,IAAAA,OAAO,CAACF,CAAD,CAAP,GAAa;AAAEU,MAAAA,QAAQ,EAAEA;AAAZ,KAAb;AACAP,IAAAA,EAAE,CAACe,GAAH,CAAOlB,CAAP,EAAUU,QAAV;AACD,GAJD;;AAMA,SAAOP,EAAE,CAACgB,IAAH,KAAY,CAAnB,EAAsB;AACpBnB,IAAAA,CAAC,GAAGG,EAAE,CAACiB,SAAH,EAAJ;AACAhB,IAAAA,MAAM,GAAGF,OAAO,CAACF,CAAD,CAAhB;;AACA,QAAII,MAAM,CAACM,QAAP,KAAoBM,MAAM,CAACC,iBAA/B,EAAkD;AAChD;AACD;;AAEDpB,IAAAA,MAAM,CAACG,CAAD,CAAN,CAAUe,OAAV,CAAkBV,eAAlB;AACD;;AAED,SAAOH,OAAP;AACD","sourcesContent":["var _ = require(\"../lodash\");\nvar PriorityQueue = require(\"../data/priority-queue\");\n\nmodule.exports = dijkstra;\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(g, String(source),\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn || function(v) { return g.outEdges(v); });\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function(edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\"dijkstra does not allow negative edge weights. \" +\n                      \"Bad edge: \" + edge + \" Weight: \" + weight);\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function(v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n"]},"metadata":{},"sourceType":"script"}