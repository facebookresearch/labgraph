{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zenak\\\\Desktop\\\\labgraph_monitor\\\\src\\\\App.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FlowChartWithState } from \"@mrblenny/react-flow-chart\";\nimport dagre from \"dagre\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst chart = {\n  offset: {\n    x: 0,\n    y: 0\n  },\n  nodes: {\n    node1: {\n      id: \"node1\",\n      type: \"output-only\",\n      ports: {\n        port1: {\n          id: \"port1\",\n          type: \"output\",\n          properties: {\n            value: \"yes\"\n          }\n        },\n        port2: {\n          id: \"port2\",\n          type: \"output\",\n          properties: {\n            value: \"no\"\n          }\n        }\n      }\n    },\n    node2: {\n      id: \"node2\",\n      type: \"input-output\",\n      ports: {\n        port1: {\n          id: \"port1\",\n          type: \"input\"\n        },\n        port2: {\n          id: \"port2\",\n          type: \"output\"\n        }\n      }\n    },\n    node3: {\n      id: \"node3\",\n      type: \"input-output\",\n      ports: {\n        port1: {\n          id: \"port1\",\n          type: \"input\"\n        },\n        port2: {\n          id: \"port2\",\n          type: \"output\"\n        }\n      }\n    },\n    node4: {\n      id: \"node4\",\n      type: \"input-output\",\n      ports: {\n        port1: {\n          id: \"port1\",\n          type: \"input\"\n        },\n        port2: {\n          id: \"port2\",\n          type: \"output\"\n        }\n      }\n    },\n    node5: {\n      id: \"node5\",\n      type: \"input-output\",\n      ports: {\n        port1: {\n          id: \"port1\",\n          type: \"input\"\n        },\n        port2: {\n          id: \"port2\",\n          type: \"output\"\n        }\n      }\n    }\n  },\n  links: {\n    link1: {\n      id: \"link1\",\n      from: {\n        nodeId: \"node1\",\n        portId: \"port1\"\n      },\n      to: {\n        nodeId: \"node2\",\n        portId: \"port1\"\n      }\n    },\n    link2: {\n      id: \"link2\",\n      from: {\n        nodeId: \"node1\",\n        portId: \"port2\"\n      },\n      to: {\n        nodeId: \"node3\",\n        portId: \"port1\"\n      }\n    },\n    link3: {\n      id: \"link3\",\n      from: {\n        nodeId: \"node2\",\n        portId: \"port2\"\n      },\n      to: {\n        nodeId: \"node4\",\n        portId: \"port1\"\n      }\n    },\n    link4: {\n      id: \"link4\",\n      from: {\n        nodeId: \"node2\",\n        portId: \"port2\"\n      },\n      to: {\n        nodeId: \"node5\",\n        portId: \"port1\"\n      }\n    }\n  },\n  selected: {},\n  hovered: {}\n}; // calculate auto layout\n\nconst g = new dagre.graphlib.Graph();\ng.setGraph({\n  marginx: 20,\n  marginy: 20\n});\ng.setDefaultEdgeLabel(function () {\n  return {};\n});\n\nfor (let nodeId in chart.nodes) {\n  // you need to know dimension of every node\n  g.setNode(nodeId, {\n    width: 200,\n    height: 100\n  });\n}\n\nfor (let k in chart.links) {\n  g.setEdge(chart.links[k].from.nodeId, chart.links[k].to.nodeId);\n}\n\ndagre.layout(g);\n\nfor (let nodeId in chart.nodes) {\n  chart.nodes[nodeId].position = {\n    x: g.node(nodeId).x - 200 / 2,\n    y: g.node(nodeId).y - 100 / 2\n  };\n} //\n\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(FlowChartWithState, {\n    initialValue: chart\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 10\n  }, this);\n}\n\n_c = App;\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 175,\n  columnNumber: 17\n}, this), rootElement);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/src/App.js"],"names":["React","ReactDOM","FlowChartWithState","dagre","chart","offset","x","y","nodes","node1","id","type","ports","port1","properties","value","port2","node2","node3","node4","node5","links","link1","from","nodeId","portId","to","link2","link3","link4","selected","hovered","g","graphlib","Graph","setGraph","marginx","marginy","setDefaultEdgeLabel","setNode","width","height","k","setEdge","layout","position","node","App","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { FlowChartWithState } from \"@mrblenny/react-flow-chart\";\r\nimport dagre from \"dagre\";\r\n\r\nconst chart = {\r\n  offset: {\r\n    x: 0,\r\n    y: 0\r\n  },\r\n  nodes: {\r\n    node1: {\r\n      id: \"node1\",\r\n      type: \"output-only\",\r\n      ports: {\r\n        port1: {\r\n          id: \"port1\",\r\n          type: \"output\",\r\n          properties: {\r\n            value: \"yes\"\r\n          }\r\n        },\r\n        port2: {\r\n          id: \"port2\",\r\n          type: \"output\",\r\n          properties: {\r\n            value: \"no\"\r\n          }\r\n        }\r\n      }\r\n    },\r\n    node2: {\r\n      id: \"node2\",\r\n      type: \"input-output\",\r\n      ports: {\r\n        port1: {\r\n          id: \"port1\",\r\n          type: \"input\"\r\n        },\r\n        port2: {\r\n          id: \"port2\",\r\n          type: \"output\"\r\n        }\r\n      }\r\n    },\r\n    node3: {\r\n      id: \"node3\",\r\n      type: \"input-output\",\r\n      ports: {\r\n        port1: {\r\n          id: \"port1\",\r\n          type: \"input\"\r\n        },\r\n        port2: {\r\n          id: \"port2\",\r\n          type: \"output\"\r\n        }\r\n      }\r\n    },\r\n    node4: {\r\n      id: \"node4\",\r\n      type: \"input-output\",\r\n      ports: {\r\n        port1: {\r\n          id: \"port1\",\r\n          type: \"input\"\r\n        },\r\n        port2: {\r\n          id: \"port2\",\r\n          type: \"output\"\r\n        }\r\n      }\r\n    },\r\n    node5: {\r\n      id: \"node5\",\r\n      type: \"input-output\",\r\n      ports: {\r\n        port1: {\r\n          id: \"port1\",\r\n          type: \"input\"\r\n        },\r\n        port2: {\r\n          id: \"port2\",\r\n          type: \"output\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  links: {\r\n    link1: {\r\n      id: \"link1\",\r\n      from: {\r\n        nodeId: \"node1\",\r\n        portId: \"port1\"\r\n      },\r\n      to: {\r\n        nodeId: \"node2\",\r\n        portId: \"port1\"\r\n      }\r\n    },\r\n    link2: {\r\n      id: \"link2\",\r\n      from: {\r\n        nodeId: \"node1\",\r\n        portId: \"port2\"\r\n      },\r\n      to: {\r\n        nodeId: \"node3\",\r\n        portId: \"port1\"\r\n      }\r\n    },\r\n    link3: {\r\n      id: \"link3\",\r\n      from: {\r\n        nodeId: \"node2\",\r\n        portId: \"port2\"\r\n      },\r\n      to: {\r\n        nodeId: \"node4\",\r\n        portId: \"port1\"\r\n      }\r\n    },\r\n    link4: {\r\n      id: \"link4\",\r\n      from: {\r\n        nodeId: \"node2\",\r\n        portId: \"port2\"\r\n      },\r\n      to: {\r\n        nodeId: \"node5\",\r\n        portId: \"port1\"\r\n      }\r\n    }\r\n  },\r\n  selected: {},\r\n  hovered: {}\r\n};\r\n\r\n// calculate auto layout\r\n\r\nconst g = new dagre.graphlib.Graph();\r\ng.setGraph({\r\n  marginx: 20,\r\n  marginy: 20\r\n});\r\ng.setDefaultEdgeLabel(function() {\r\n  return {};\r\n});\r\n\r\nfor (let nodeId in chart.nodes) {\r\n  // you need to know dimension of every node\r\n  g.setNode(nodeId, { width: 200, height: 100 });\r\n}\r\n\r\nfor (let k in chart.links) {\r\n  g.setEdge(chart.links[k].from.nodeId, chart.links[k].to.nodeId);\r\n}\r\n\r\ndagre.layout(g);\r\n\r\nfor (let nodeId in chart.nodes) {\r\n  chart.nodes[nodeId].position = {\r\n    x: g.node(nodeId).x - 200 / 2,\r\n    y: g.node(nodeId).y - 100 / 2\r\n  };\r\n}\r\n\r\n//\r\n\r\nfunction App() {\r\n  return <FlowChartWithState initialValue={chart} />;\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"]},"metadata":{},"sourceType":"module"}