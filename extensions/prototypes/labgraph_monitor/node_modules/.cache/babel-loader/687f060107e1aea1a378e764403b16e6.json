{"ast":null,"code":"/**\r\n * Converts the data from server to connections array\r\n * @param {Array} data - data received from server through websocket\r\n * @return {Array} An array having arrays of connections\r\n */\nfunction dataToConnections(data) {\n  const connections = {};\n\n  for (const [a, b] of data) {\n    connections[Object.keys(a)[0]] = [Object.keys(b)[0]];\n  }\n\n  return connections;\n}\n\nfunction dataToNodes(data) {\n  const connections = {};\n\n  for (const [a, b] of data) {\n    connections[Object.keys(a)[0]] = a[Object.keys(a)[0]];\n    connections[Object.keys(b)[0]] = b[Object.keys(b)[0]];\n  }\n\n  console.log(connections);\n  return connections;\n}\n\nmodule.exports = {\n  dataToConnections,\n  dataToNodes\n};\n/*\r\n{'NoiseGenerator': ['RollingAverager'], 'RollingAverager': ['AveragedNoise'], 'AveragedNoise': ['Plot']}\r\n*/\n\ndataToNodes([[{\n  \"NoiseGenerator\": {\n    \"type\": \"Node\",\n    \"config\": {\n      \"NoiseGeneratorConfig\": {\n        \"sample_rate\": \"float\",\n        \"num_features\": \"int\"\n      }\n    },\n    \"inputs\": [],\n    \"outputs\": [{\n      \"RandomMessage\": {\n        \"timestamp\": \"float\",\n        \"data\": \"np.ndarray\"\n      }\n    }]\n  }\n}, {\n  \"RollingAverager\": {\n    \"type\": \"Node\",\n    \"state\": {\n      \"RollingState\": {\n        \"messages\": \"List.RandomMessage\"\n      }\n    },\n    \"config\": {\n      \"RollingConfig\": {\n        \"window\": \"float\"\n      }\n    },\n    \"inputs\": [{\n      \"RandomMessage\": {\n        \"timestamp\": \"float\",\n        \"data\": \"np.ndarray\"\n      }\n    }],\n    \"outputs\": [{\n      \"RandomMessage\": {\n        \"timestamp\": \"float\",\n        \"data\": \"np.ndarray\"\n      }\n    }]\n  }\n}], [{\n  \"RollingAverager\": {\n    \"type\": \"Node\",\n    \"state\": {\n      \"RollingState\": {\n        \"messages\": \"List.RandomMessage\"\n      }\n    },\n    \"config\": {\n      \"RollingConfig\": {\n        \"window\": \"float\"\n      }\n    },\n    \"inputs\": [{\n      \"RandomMessage\": {\n        \"timestamp\": \"float\",\n        \"data\": \"np.ndarray\"\n      }\n    }],\n    \"outputs\": [{\n      \"RandomMessage\": {\n        \"timestamp\": \"float\",\n        \"data\": \"np.ndarray\"\n      }\n    }]\n  }\n}, {\n  \"AveragedNoise\": {\n    \"type\": \"Group\",\n    \"config\": {\n      \"AveragedNoiseConfig\": {\n        \"sample_rate\": \"float\",\n        \"num_features\": \"int\",\n        \"window\": \"float\"\n      }\n    },\n    \"inputs\": [],\n    \"outputs\": [{\n      \"RandomMessage\": {\n        \"timestamp\": \"float\",\n        \"data\": \"np.ndarray\"\n      }\n    }],\n    \"connections\": {\n      \"NoiseGenerator\": \"RollingAverager\",\n      \"RollingAverager\": \"AveragedNoise\"\n    }\n  }\n}], [{\n  \"AveragedNoise\": {\n    \"type\": \"Group\",\n    \"config\": {\n      \"AveragedNoiseConfig\": {\n        \"sample_rate\": \"float\",\n        \"num_features\": \"int\",\n        \"window\": \"float\"\n      }\n    },\n    \"inputs\": [],\n    \"outputs\": [{\n      \"RandomMessage\": {\n        \"timestamp\": \"float\",\n        \"data\": \"np.ndarray\"\n      }\n    }],\n    \"connections\": {\n      \"NoiseGenerator\": \"RollingAverager\",\n      \"RollingAverager\": \"AveragedNoise\"\n    }\n  }\n}, {\n  \"Plot\": {\n    \"type\": \"Node\",\n    \"state\": \"PlotState\",\n    \"config\": \"PlotConfig\",\n    \"inputs\": [\"RandomMessage\"],\n    \"outputs\": []\n  }\n}]]);","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/src/helper.js"],"names":["dataToConnections","data","connections","a","b","Object","keys","dataToNodes","console","log","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Converts the data from server to connections array\r\n * @param {Array} data - data received from server through websocket\r\n * @return {Array} An array having arrays of connections\r\n */\r\nfunction dataToConnections(data){\r\n    const connections = {}\r\n    for (const [a, b] of data) {\r\n        connections[Object.keys(a)[0]] = [\r\n            Object.keys(b)[0]\r\n        ]\r\n    }\r\n    return connections\r\n}\r\n\r\nfunction dataToNodes(data){\r\n    const connections = {}\r\n    for (const [a, b] of data) {\r\n        connections[Object.keys(a)[0]] = a[Object.keys(a)[0]]\r\n        connections[Object.keys(b)[0]] = b[Object.keys(b)[0]]\r\n    }\r\n    console.log(connections)\r\n    return connections\r\n}\r\n\r\nmodule.exports = {\r\n    dataToConnections,\r\n    dataToNodes,\r\n}\r\n/*\r\n{'NoiseGenerator': ['RollingAverager'], 'RollingAverager': ['AveragedNoise'], 'AveragedNoise': ['Plot']}\r\n*/ \r\n\r\ndataToNodes(\r\n    [\r\n        [\r\n            {\r\n                \"NoiseGenerator\": {\r\n                    \"type\": \"Node\",\r\n                    \"config\": {\r\n                        \"NoiseGeneratorConfig\": {\r\n                            \"sample_rate\": \"float\",\r\n                            \"num_features\": \"int\"\r\n                        }\r\n                    },\r\n                    \"inputs\": [],\r\n                    \"outputs\": [\r\n                        {\r\n                            \"RandomMessage\": {\r\n                                \"timestamp\": \"float\",\r\n                                \"data\": \"np.ndarray\"\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                \"RollingAverager\": {\r\n                    \"type\": \"Node\",\r\n                    \"state\": {\r\n                        \"RollingState\": {\r\n                            \"messages\": \"List.RandomMessage\"\r\n                        }\r\n                    },\r\n                    \"config\": {\r\n                        \"RollingConfig\": {\r\n                            \"window\": \"float\"\r\n                        }\r\n                    },\r\n                    \"inputs\": [\r\n                        {\r\n                            \"RandomMessage\": {\r\n                                \"timestamp\": \"float\",\r\n                                \"data\": \"np.ndarray\"\r\n                            }\r\n                        }\r\n                    ],\r\n                    \"outputs\": [\r\n                        {\r\n                            \"RandomMessage\": {\r\n                                \"timestamp\": \"float\",\r\n                                \"data\": \"np.ndarray\"\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        ],\r\n        [\r\n            {\r\n                \"RollingAverager\": {\r\n                    \"type\": \"Node\",\r\n                    \"state\": {\r\n                        \"RollingState\": {\r\n                            \"messages\": \"List.RandomMessage\"\r\n                        }\r\n                    },\r\n                    \"config\": {\r\n                        \"RollingConfig\": {\r\n                            \"window\": \"float\"\r\n                        }\r\n                    },\r\n                    \"inputs\": [\r\n                        {\r\n                            \"RandomMessage\": {\r\n                                \"timestamp\": \"float\",\r\n                                \"data\": \"np.ndarray\"\r\n                            }\r\n                        }\r\n                    ],\r\n                    \"outputs\": [\r\n                        {\r\n                            \"RandomMessage\": {\r\n                                \"timestamp\": \"float\",\r\n                                \"data\": \"np.ndarray\"\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                \"AveragedNoise\": {\r\n                    \"type\": \"Group\",\r\n                    \"config\": {\r\n                        \"AveragedNoiseConfig\": {\r\n                            \"sample_rate\": \"float\",\r\n                            \"num_features\": \"int\",\r\n                            \"window\": \"float\"\r\n                        }\r\n                    },\r\n                    \"inputs\": [],\r\n                    \"outputs\": [\r\n                        {\r\n                            \"RandomMessage\": {\r\n                                \"timestamp\": \"float\",\r\n                                \"data\": \"np.ndarray\"\r\n                            }\r\n                        }\r\n                    ],\r\n                    \"connections\": {\r\n                        \"NoiseGenerator\": \"RollingAverager\",\r\n                        \"RollingAverager\": \"AveragedNoise\"\r\n                    }\r\n                }\r\n            }\r\n        ],\r\n        [\r\n            {\r\n                \"AveragedNoise\": {\r\n                    \"type\": \"Group\",\r\n                    \"config\": {\r\n                        \"AveragedNoiseConfig\": {\r\n                            \"sample_rate\": \"float\",\r\n                            \"num_features\": \"int\",\r\n                            \"window\": \"float\"\r\n                        }\r\n                    },\r\n                    \"inputs\": [],\r\n                    \"outputs\": [\r\n                        {\r\n                            \"RandomMessage\": {\r\n                                \"timestamp\": \"float\",\r\n                                \"data\": \"np.ndarray\"\r\n                            }\r\n                        }\r\n                    ],\r\n                    \"connections\": {\r\n                        \"NoiseGenerator\": \"RollingAverager\",\r\n                        \"RollingAverager\": \"AveragedNoise\"\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                \"Plot\": {\r\n                    \"type\": \"Node\",\r\n                    \"state\": \"PlotState\",\r\n                    \"config\": \"PlotConfig\",\r\n                    \"inputs\": [\r\n                        \"RandomMessage\"\r\n                    ],\r\n                    \"outputs\": []\r\n                }\r\n            }\r\n        ]\r\n    ]\r\n)"]},"metadata":{},"sourceType":"module"}