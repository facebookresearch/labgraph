{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"./lodash\");\n\nvar acyclic = require(\"./acyclic\");\n\nvar normalize = require(\"./normalize\");\n\nvar rank = require(\"./rank\");\n\nvar normalizeRanks = require(\"./util\").normalizeRanks;\n\nvar parentDummyChains = require(\"./parent-dummy-chains\");\n\nvar removeEmptyRanks = require(\"./util\").removeEmptyRanks;\n\nvar nestingGraph = require(\"./nesting-graph\");\n\nvar addBorderSegments = require(\"./add-border-segments\");\n\nvar coordinateSystem = require(\"./coordinate-system\");\n\nvar order = require(\"./order\");\n\nvar position = require(\"./position\");\n\nvar util = require(\"./util\");\n\nvar Graph = require(\"./graphlib\").Graph;\n\nmodule.exports = layout;\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time(\"layout\", function () {\n    var layoutGraph = time(\"  buildLayoutGraph\", function () {\n      return buildLayoutGraph(g);\n    });\n    time(\"  runLayout\", function () {\n      runLayout(layoutGraph, time);\n    });\n    time(\"  updateInputGraph\", function () {\n      updateInputGraph(g, layoutGraph);\n    });\n  });\n}\n\nfunction runLayout(g, time) {\n  time(\"    makeSpaceForEdgeLabels\", function () {\n    makeSpaceForEdgeLabels(g);\n  });\n  time(\"    removeSelfEdges\", function () {\n    removeSelfEdges(g);\n  });\n  time(\"    acyclic\", function () {\n    acyclic.run(g);\n  });\n  time(\"    nestingGraph.run\", function () {\n    nestingGraph.run(g);\n  });\n  time(\"    rank\", function () {\n    rank(util.asNonCompoundGraph(g));\n  });\n  time(\"    injectEdgeLabelProxies\", function () {\n    injectEdgeLabelProxies(g);\n  });\n  time(\"    removeEmptyRanks\", function () {\n    removeEmptyRanks(g);\n  });\n  time(\"    nestingGraph.cleanup\", function () {\n    nestingGraph.cleanup(g);\n  });\n  time(\"    normalizeRanks\", function () {\n    normalizeRanks(g);\n  });\n  time(\"    assignRankMinMax\", function () {\n    assignRankMinMax(g);\n  });\n  time(\"    removeEdgeLabelProxies\", function () {\n    removeEdgeLabelProxies(g);\n  });\n  time(\"    normalize.run\", function () {\n    normalize.run(g);\n  });\n  time(\"    parentDummyChains\", function () {\n    parentDummyChains(g);\n  });\n  time(\"    addBorderSegments\", function () {\n    addBorderSegments(g);\n  });\n  time(\"    order\", function () {\n    order(g);\n  });\n  time(\"    insertSelfEdges\", function () {\n    insertSelfEdges(g);\n  });\n  time(\"    adjustCoordinateSystem\", function () {\n    coordinateSystem.adjust(g);\n  });\n  time(\"    position\", function () {\n    position(g);\n  });\n  time(\"    positionSelfEdges\", function () {\n    positionSelfEdges(g);\n  });\n  time(\"    removeBorderNodes\", function () {\n    removeBorderNodes(g);\n  });\n  time(\"    normalize.undo\", function () {\n    normalize.undo(g);\n  });\n  time(\"    fixupEdgeLabelCoords\", function () {\n    fixupEdgeLabelCoords(g);\n  });\n  time(\"    undoCoordinateSystem\", function () {\n    coordinateSystem.undo(g);\n  });\n  time(\"    translateGraph\", function () {\n    translateGraph(g);\n  });\n  time(\"    assignNodeIntersects\", function () {\n    assignNodeIntersects(g);\n  });\n  time(\"    reversePoints\", function () {\n    reversePointsForReversedEdges(g);\n  });\n  time(\"    acyclic.undo\", function () {\n    acyclic.undo(g);\n  });\n}\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\n\n\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n    inputLabel.points = layoutLabel.points;\n\n    if (_.has(layoutLabel, \"x\")) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = [\"nodesep\", \"edgesep\", \"ranksep\", \"marginx\", \"marginy\"];\nvar graphDefaults = {\n  ranksep: 50,\n  edgesep: 20,\n  nodesep: 50,\n  rankdir: \"tb\"\n};\nvar graphAttrs = [\"acyclicer\", \"ranker\", \"rankdir\", \"align\"];\nvar nodeNumAttrs = [\"width\", \"height\"];\nvar nodeDefaults = {\n  width: 0,\n  height: 0\n};\nvar edgeNumAttrs = [\"minlen\", \"weight\", \"width\", \"height\", \"labeloffset\"];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: \"r\"\n};\nvar edgeAttrs = [\"labelpos\"];\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\n\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({\n    multigraph: true,\n    compound: true\n  });\n  var graph = canonicalize(inputGraph.graph());\n  g.setGraph(_.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs)));\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(e, _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs)));\n  });\n\n  return g;\n}\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\n\n\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n\n    if (edge.labelpos.toLowerCase() !== \"c\") {\n      if (graph.rankdir === \"TB\" || graph.rankdir === \"BT\") {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\n\n\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = {\n        rank: (w.rank - v.rank) / 2 + v.rank,\n        e: e\n      };\n      util.addDummyNode(g, \"edge-proxy\", label, \"_ep\");\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n\n    if (node.dummy === \"edge-proxy\") {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n\n    if (_.has(edge, \"x\")) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n\n    if (_.has(edge, \"x\")) {\n      edge.x -= minX;\n    }\n\n    if (_.has(edge, \"y\")) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n\n    if (_.has(edge, \"x\")) {\n      if (edge.labelpos === \"l\" || edge.labelpos === \"r\") {\n        edge.width -= edge.labeloffset;\n      }\n\n      switch (edge.labelpos) {\n        case \"l\":\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n\n        case \"r\":\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === \"border\") {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n\n      node.selfEdges.push({\n        e: e,\n        label: g.edge(e)\n      });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(g, \"selfedge\", {\n          width: selfEdge.label.width,\n          height: selfEdge.label.height,\n          rank: node.rank,\n          order: i + ++orderShift,\n          e: selfEdge.e,\n          label: selfEdge.label\n        }, \"_se\");\n      });\n\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n\n    if (node.dummy === \"selfedge\") {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [{\n        x: x + 2 * dx / 3,\n        y: y - dy\n      }, {\n        x: x + 5 * dx / 6,\n        y: y - dy\n      }, {\n        x: x + dx,\n        y: y\n      }, {\n        x: x + 5 * dx / 6,\n        y: y + dy\n      }, {\n        x: x + 2 * dx / 3,\n        y: y + dy\n      }];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n\n  return newAttrs;\n}","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/node_modules/dagre/lib/layout.js"],"names":["_","require","acyclic","normalize","rank","normalizeRanks","parentDummyChains","removeEmptyRanks","nestingGraph","addBorderSegments","coordinateSystem","order","position","util","Graph","module","exports","layout","g","opts","time","debugTiming","notime","layoutGraph","buildLayoutGraph","runLayout","updateInputGraph","makeSpaceForEdgeLabels","removeSelfEdges","run","asNonCompoundGraph","injectEdgeLabelProxies","cleanup","assignRankMinMax","removeEdgeLabelProxies","insertSelfEdges","adjust","positionSelfEdges","removeBorderNodes","undo","fixupEdgeLabelCoords","translateGraph","assignNodeIntersects","reversePointsForReversedEdges","inputGraph","forEach","nodes","v","inputLabel","node","layoutLabel","x","y","children","length","width","height","edges","e","edge","points","has","graph","graphNumAttrs","graphDefaults","ranksep","edgesep","nodesep","rankdir","graphAttrs","nodeNumAttrs","nodeDefaults","edgeNumAttrs","edgeDefaults","minlen","weight","labeloffset","labelpos","edgeAttrs","multigraph","compound","canonicalize","setGraph","merge","selectNumberAttrs","pick","setNode","defaults","setParent","parent","setEdge","toLowerCase","w","label","addDummyNode","maxRank","borderTop","minRank","borderBottom","max","dummy","labelRank","removeNode","minX","Number","POSITIVE_INFINITY","maxX","minY","maxY","graphLabel","marginX","marginx","marginY","marginy","getExtremes","attrs","h","Math","min","p","nodeV","nodeW","p1","p2","unshift","intersectRect","push","reversed","reverse","t","b","l","last","borderLeft","r","borderRight","abs","selfEdges","removeEdge","layers","buildLayerMatrix","layer","orderShift","i","selfEdge","selfNode","dx","dy","obj","mapValues","newAttrs","k"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _ = require(\"./lodash\");\nvar acyclic = require(\"./acyclic\");\nvar normalize = require(\"./normalize\");\nvar rank = require(\"./rank\");\nvar normalizeRanks = require(\"./util\").normalizeRanks;\nvar parentDummyChains = require(\"./parent-dummy-chains\");\nvar removeEmptyRanks = require(\"./util\").removeEmptyRanks;\nvar nestingGraph = require(\"./nesting-graph\");\nvar addBorderSegments = require(\"./add-border-segments\");\nvar coordinateSystem = require(\"./coordinate-system\");\nvar order = require(\"./order\");\nvar position = require(\"./position\");\nvar util = require(\"./util\");\nvar Graph = require(\"./graphlib\").Graph;\n\nmodule.exports = layout;\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time(\"layout\", function() {\n    var layoutGraph = \n      time(\"  buildLayoutGraph\", function() { return buildLayoutGraph(g); });\n    time(\"  runLayout\",        function() { runLayout(layoutGraph, time); });\n    time(\"  updateInputGraph\", function() { updateInputGraph(g, layoutGraph); });\n  });\n}\n\nfunction runLayout(g, time) {\n  time(\"    makeSpaceForEdgeLabels\", function() { makeSpaceForEdgeLabels(g); });\n  time(\"    removeSelfEdges\",        function() { removeSelfEdges(g); });\n  time(\"    acyclic\",                function() { acyclic.run(g); });\n  time(\"    nestingGraph.run\",       function() { nestingGraph.run(g); });\n  time(\"    rank\",                   function() { rank(util.asNonCompoundGraph(g)); });\n  time(\"    injectEdgeLabelProxies\", function() { injectEdgeLabelProxies(g); });\n  time(\"    removeEmptyRanks\",       function() { removeEmptyRanks(g); });\n  time(\"    nestingGraph.cleanup\",   function() { nestingGraph.cleanup(g); });\n  time(\"    normalizeRanks\",         function() { normalizeRanks(g); });\n  time(\"    assignRankMinMax\",       function() { assignRankMinMax(g); });\n  time(\"    removeEdgeLabelProxies\", function() { removeEdgeLabelProxies(g); });\n  time(\"    normalize.run\",          function() { normalize.run(g); });\n  time(\"    parentDummyChains\",      function() { parentDummyChains(g); });\n  time(\"    addBorderSegments\",      function() { addBorderSegments(g); });\n  time(\"    order\",                  function() { order(g); });\n  time(\"    insertSelfEdges\",        function() { insertSelfEdges(g); });\n  time(\"    adjustCoordinateSystem\", function() { coordinateSystem.adjust(g); });\n  time(\"    position\",               function() { position(g); });\n  time(\"    positionSelfEdges\",      function() { positionSelfEdges(g); });\n  time(\"    removeBorderNodes\",      function() { removeBorderNodes(g); });\n  time(\"    normalize.undo\",         function() { normalize.undo(g); });\n  time(\"    fixupEdgeLabelCoords\",   function() { fixupEdgeLabelCoords(g); });\n  time(\"    undoCoordinateSystem\",   function() { coordinateSystem.undo(g); });\n  time(\"    translateGraph\",         function() { translateGraph(g); });\n  time(\"    assignNodeIntersects\",   function() { assignNodeIntersects(g); });\n  time(\"    reversePoints\",          function() { reversePointsForReversedEdges(g); });\n  time(\"    acyclic.undo\",           function() { acyclic.undo(g); });\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function(v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function(e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (_.has(layoutLabel, \"x\")) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = [\"nodesep\", \"edgesep\", \"ranksep\", \"marginx\", \"marginy\"];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: \"tb\" };\nvar graphAttrs = [\"acyclicer\", \"ranker\", \"rankdir\", \"align\"];\nvar nodeNumAttrs = [\"width\", \"height\"];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = [\"minlen\", \"weight\", \"width\", \"height\", \"labeloffset\"];\nvar edgeDefaults = {\n  minlen: 1, weight: 1, width: 0, height: 0,\n  labeloffset: 10, labelpos: \"r\"\n};\nvar edgeAttrs = [\"labelpos\"];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(_.merge({},\n    graphDefaults,\n    selectNumberAttrs(graph, graphNumAttrs),\n    _.pick(graph, graphAttrs)));\n\n  _.forEach(inputGraph.nodes(), function(v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function(e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(e, _.merge({},\n      edgeDefaults,\n      selectNumberAttrs(edge, edgeNumAttrs),\n      _.pick(edge, edgeAttrs)));\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== \"c\") {\n      if (graph.rankdir === \"TB\" || graph.rankdir === \"BT\") {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, \"edge-proxy\", label, \"_ep\");\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (node.dummy === \"edge-proxy\") {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function(v) { getExtremes(g.node(v)); });\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (_.has(edge, \"x\")) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function(p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (_.has(edge, \"x\")) { edge.x -= minX; }\n    if (_.has(edge, \"y\")) { edge.y -= minY; }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (_.has(edge, \"x\")) {\n      if (edge.labelpos === \"l\" || edge.labelpos === \"r\") {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n      case \"l\": edge.x -= edge.width / 2 + edge.labeloffset; break;\n      case \"r\": edge.x += edge.width / 2 + edge.labeloffset; break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function(v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function(v) {\n    if (g.node(v).dummy === \"border\") {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function(e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function(layer) {\n    var orderShift = 0;\n    _.forEach(layer, function(v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function(selfEdge) {\n        util.addDummyNode(g, \"selfedge\", {\n          width: selfEdge.label.width,\n          height: selfEdge.label.height,\n          rank: node.rank,\n          order: i + (++orderShift),\n          e: selfEdge.e,\n          label: selfEdge.label\n        }, \"_se\");\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (node.dummy === \"selfedge\") {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + 2 * dx / 3, y: y - dy },\n        { x: x + 5 * dx / 6, y: y - dy },\n        { x: x +     dx    , y: y },\n        { x: x + 5 * dx / 6, y: y + dy },\n        { x: x + 2 * dx / 3, y: y + dy }\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function(v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n"]},"metadata":{},"sourceType":"script"}