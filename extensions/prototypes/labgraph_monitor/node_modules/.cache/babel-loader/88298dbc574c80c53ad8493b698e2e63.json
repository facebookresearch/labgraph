{"ast":null,"code":"var apply = require('./_apply');\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\n\nvar nativeMax = Math.max;\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\n\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? func.length - 1 : start, 0);\n  return function () {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n\n    index = -1;\n    var otherArgs = Array(start + 1);\n\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/node_modules/lodash/_overRest.js"],"names":["apply","require","nativeMax","Math","max","overRest","func","start","transform","undefined","length","args","arguments","index","array","Array","otherArgs","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAEA;;;AACA,IAAIC,SAAS,GAAGC,IAAI,CAACC,GAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,KAAxB,EAA+BC,SAA/B,EAA0C;AACxCD,EAAAA,KAAK,GAAGL,SAAS,CAACK,KAAK,KAAKE,SAAV,GAAuBH,IAAI,CAACI,MAAL,GAAc,CAArC,GAA0CH,KAA3C,EAAkD,CAAlD,CAAjB;AACA,SAAO,YAAW;AAChB,QAAII,IAAI,GAAGC,SAAX;AAAA,QACIC,KAAK,GAAG,CAAC,CADb;AAAA,QAEIH,MAAM,GAAGR,SAAS,CAACS,IAAI,CAACD,MAAL,GAAcH,KAAf,EAAsB,CAAtB,CAFtB;AAAA,QAGIO,KAAK,GAAGC,KAAK,CAACL,MAAD,CAHjB;;AAKA,WAAO,EAAEG,KAAF,GAAUH,MAAjB,EAAyB;AACvBI,MAAAA,KAAK,CAACD,KAAD,CAAL,GAAeF,IAAI,CAACJ,KAAK,GAAGM,KAAT,CAAnB;AACD;;AACDA,IAAAA,KAAK,GAAG,CAAC,CAAT;AACA,QAAIG,SAAS,GAAGD,KAAK,CAACR,KAAK,GAAG,CAAT,CAArB;;AACA,WAAO,EAAEM,KAAF,GAAUN,KAAjB,EAAwB;AACtBS,MAAAA,SAAS,CAACH,KAAD,CAAT,GAAmBF,IAAI,CAACE,KAAD,CAAvB;AACD;;AACDG,IAAAA,SAAS,CAACT,KAAD,CAAT,GAAmBC,SAAS,CAACM,KAAD,CAA5B;AACA,WAAOd,KAAK,CAACM,IAAD,EAAO,IAAP,EAAaU,SAAb,CAAZ;AACD,GAhBD;AAiBD;;AAEDC,MAAM,CAACC,OAAP,GAAiBb,QAAjB","sourcesContent":["var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n"]},"metadata":{},"sourceType":"script"}