{"ast":null,"code":"var _ = require(\"../lodash\");\n\nmodule.exports = floydWarshall;\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(g, weightFn || DEFAULT_WEIGHT_FUNC, edgeFn || function (v) {\n    return g.outEdges(v);\n  });\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {};\n  var nodes = g.nodes();\n  nodes.forEach(function (v) {\n    results[v] = {};\n    results[v][v] = {\n      distance: 0\n    };\n    nodes.forEach(function (w) {\n      if (v !== w) {\n        results[v][w] = {\n          distance: Number.POSITIVE_INFINITY\n        };\n      }\n    });\n    edgeFn(v).forEach(function (edge) {\n      var w = edge.v === v ? edge.w : edge.v;\n      var d = weightFn(edge);\n      results[v][w] = {\n        distance: d,\n        predecessor: v\n      };\n    });\n  });\n  nodes.forEach(function (k) {\n    var rowK = results[k];\n    nodes.forEach(function (i) {\n      var rowI = results[i];\n      nodes.forEach(function (j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n  return results;\n}","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/node_modules/graphlib/lib/alg/floyd-warshall.js"],"names":["_","require","module","exports","floydWarshall","DEFAULT_WEIGHT_FUNC","constant","g","weightFn","edgeFn","runFloydWarshall","v","outEdges","results","nodes","forEach","distance","w","Number","POSITIVE_INFINITY","edge","d","predecessor","k","rowK","i","rowI","j","ik","kj","ij","altDistance"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,WAAD,CAAf;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,aAAjB;;AAEA,IAAIC,mBAAmB,GAAGL,CAAC,CAACM,QAAF,CAAW,CAAX,CAA1B;;AAEA,SAASF,aAAT,CAAuBG,CAAvB,EAA0BC,QAA1B,EAAoCC,MAApC,EAA4C;AAC1C,SAAOC,gBAAgB,CAACH,CAAD,EACrBC,QAAQ,IAAIH,mBADS,EAErBI,MAAM,IAAI,UAASE,CAAT,EAAY;AAAE,WAAOJ,CAAC,CAACK,QAAF,CAAWD,CAAX,CAAP;AAAuB,GAF1B,CAAvB;AAGD;;AAED,SAASD,gBAAT,CAA0BH,CAA1B,EAA6BC,QAA7B,EAAuCC,MAAvC,EAA+C;AAC7C,MAAII,OAAO,GAAG,EAAd;AACA,MAAIC,KAAK,GAAGP,CAAC,CAACO,KAAF,EAAZ;AAEAA,EAAAA,KAAK,CAACC,OAAN,CAAc,UAASJ,CAAT,EAAY;AACxBE,IAAAA,OAAO,CAACF,CAAD,CAAP,GAAa,EAAb;AACAE,IAAAA,OAAO,CAACF,CAAD,CAAP,CAAWA,CAAX,IAAgB;AAAEK,MAAAA,QAAQ,EAAE;AAAZ,KAAhB;AACAF,IAAAA,KAAK,CAACC,OAAN,CAAc,UAASE,CAAT,EAAY;AACxB,UAAIN,CAAC,KAAKM,CAAV,EAAa;AACXJ,QAAAA,OAAO,CAACF,CAAD,CAAP,CAAWM,CAAX,IAAgB;AAAED,UAAAA,QAAQ,EAAEE,MAAM,CAACC;AAAnB,SAAhB;AACD;AACF,KAJD;AAKAV,IAAAA,MAAM,CAACE,CAAD,CAAN,CAAUI,OAAV,CAAkB,UAASK,IAAT,EAAe;AAC/B,UAAIH,CAAC,GAAGG,IAAI,CAACT,CAAL,KAAWA,CAAX,GAAeS,IAAI,CAACH,CAApB,GAAwBG,IAAI,CAACT,CAArC;AACA,UAAIU,CAAC,GAAGb,QAAQ,CAACY,IAAD,CAAhB;AACAP,MAAAA,OAAO,CAACF,CAAD,CAAP,CAAWM,CAAX,IAAgB;AAAED,QAAAA,QAAQ,EAAEK,CAAZ;AAAeC,QAAAA,WAAW,EAAEX;AAA5B,OAAhB;AACD,KAJD;AAKD,GAbD;AAeAG,EAAAA,KAAK,CAACC,OAAN,CAAc,UAASQ,CAAT,EAAY;AACxB,QAAIC,IAAI,GAAGX,OAAO,CAACU,CAAD,CAAlB;AACAT,IAAAA,KAAK,CAACC,OAAN,CAAc,UAASU,CAAT,EAAY;AACxB,UAAIC,IAAI,GAAGb,OAAO,CAACY,CAAD,CAAlB;AACAX,MAAAA,KAAK,CAACC,OAAN,CAAc,UAASY,CAAT,EAAY;AACxB,YAAIC,EAAE,GAAGF,IAAI,CAACH,CAAD,CAAb;AACA,YAAIM,EAAE,GAAGL,IAAI,CAACG,CAAD,CAAb;AACA,YAAIG,EAAE,GAAGJ,IAAI,CAACC,CAAD,CAAb;AACA,YAAII,WAAW,GAAGH,EAAE,CAACZ,QAAH,GAAca,EAAE,CAACb,QAAnC;;AACA,YAAIe,WAAW,GAAGD,EAAE,CAACd,QAArB,EAA+B;AAC7Bc,UAAAA,EAAE,CAACd,QAAH,GAAce,WAAd;AACAD,UAAAA,EAAE,CAACR,WAAH,GAAiBO,EAAE,CAACP,WAApB;AACD;AACF,OATD;AAUD,KAZD;AAaD,GAfD;AAiBA,SAAOT,OAAP;AACD","sourcesContent":["var _ = require(\"../lodash\");\n\nmodule.exports = floydWarshall;\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(g,\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn || function(v) { return g.outEdges(v); });\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {};\n  var nodes = g.nodes();\n\n  nodes.forEach(function(v) {\n    results[v] = {};\n    results[v][v] = { distance: 0 };\n    nodes.forEach(function(w) {\n      if (v !== w) {\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\n      }\n    });\n    edgeFn(v).forEach(function(edge) {\n      var w = edge.v === v ? edge.w : edge.v;\n      var d = weightFn(edge);\n      results[v][w] = { distance: d, predecessor: v };\n    });\n  });\n\n  nodes.forEach(function(k) {\n    var rowK = results[k];\n    nodes.forEach(function(i) {\n      var rowI = results[i];\n      nodes.forEach(function(j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n\n  return results;\n}\n"]},"metadata":{},"sourceType":"script"}