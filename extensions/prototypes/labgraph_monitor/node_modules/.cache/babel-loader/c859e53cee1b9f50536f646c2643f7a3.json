{"ast":null,"code":"var _ = require(\"../lodash\");\n\nmodule.exports = dfs;\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\n\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n  var acc = [];\n  var visited = {};\n\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error(\"Graph does not have node: \" + v);\n    }\n\n    doDfs(g, v, order === \"post\", visited, navigation, acc);\n  });\n\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/node_modules/graphlib/lib/alg/dfs.js"],"names":["_","require","module","exports","dfs","g","vs","order","isArray","navigation","isDirected","successors","neighbors","bind","acc","visited","each","v","hasNode","Error","doDfs","postorder","has","push","w"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,WAAD,CAAf;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,GAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,GAAT,CAAaC,CAAb,EAAgBC,EAAhB,EAAoBC,KAApB,EAA2B;AACzB,MAAI,CAACP,CAAC,CAACQ,OAAF,CAAUF,EAAV,CAAL,EAAoB;AAClBA,IAAAA,EAAE,GAAG,CAACA,EAAD,CAAL;AACD;;AAED,MAAIG,UAAU,GAAG,CAACJ,CAAC,CAACK,UAAF,KAAiBL,CAAC,CAACM,UAAnB,GAAgCN,CAAC,CAACO,SAAnC,EAA8CC,IAA9C,CAAmDR,CAAnD,CAAjB;AAEA,MAAIS,GAAG,GAAG,EAAV;AACA,MAAIC,OAAO,GAAG,EAAd;;AACAf,EAAAA,CAAC,CAACgB,IAAF,CAAOV,EAAP,EAAW,UAASW,CAAT,EAAY;AACrB,QAAI,CAACZ,CAAC,CAACa,OAAF,CAAUD,CAAV,CAAL,EAAmB;AACjB,YAAM,IAAIE,KAAJ,CAAU,+BAA+BF,CAAzC,CAAN;AACD;;AAEDG,IAAAA,KAAK,CAACf,CAAD,EAAIY,CAAJ,EAAOV,KAAK,KAAK,MAAjB,EAAyBQ,OAAzB,EAAkCN,UAAlC,EAA8CK,GAA9C,CAAL;AACD,GAND;;AAOA,SAAOA,GAAP;AACD;;AAED,SAASM,KAAT,CAAef,CAAf,EAAkBY,CAAlB,EAAqBI,SAArB,EAAgCN,OAAhC,EAAyCN,UAAzC,EAAqDK,GAArD,EAA0D;AACxD,MAAI,CAACd,CAAC,CAACsB,GAAF,CAAMP,OAAN,EAAeE,CAAf,CAAL,EAAwB;AACtBF,IAAAA,OAAO,CAACE,CAAD,CAAP,GAAa,IAAb;;AAEA,QAAI,CAACI,SAAL,EAAgB;AAAEP,MAAAA,GAAG,CAACS,IAAJ,CAASN,CAAT;AAAc;;AAChCjB,IAAAA,CAAC,CAACgB,IAAF,CAAOP,UAAU,CAACQ,CAAD,CAAjB,EAAsB,UAASO,CAAT,EAAY;AAChCJ,MAAAA,KAAK,CAACf,CAAD,EAAImB,CAAJ,EAAOH,SAAP,EAAkBN,OAAlB,EAA2BN,UAA3B,EAAuCK,GAAvC,CAAL;AACD,KAFD;;AAGA,QAAIO,SAAJ,EAAe;AAAEP,MAAAA,GAAG,CAACS,IAAJ,CAASN,CAAT;AAAc;AAChC;AACF","sourcesContent":["var _ = require(\"../lodash\");\n\nmodule.exports = dfs;\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function(v) {\n    if (!g.hasNode(v)) {\n      throw new Error(\"Graph does not have node: \" + v);\n    }\n\n    doDfs(g, v, order === \"post\", visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) { acc.push(v); }\n    _.each(navigation(v), function(w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) { acc.push(v); }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}