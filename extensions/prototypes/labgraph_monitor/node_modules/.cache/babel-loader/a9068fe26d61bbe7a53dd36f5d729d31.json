{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zenak\\\\Desktop\\\\labgraph_monitor\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport ReactFlow, { addEdge, MiniMap, Controls } from 'react-flow-renderer';\nimport { dataToConnections, connectionsToNodes, dataToObjects } from './helper'; // sample connections array: {'NoiseGenerator': ['RollingAverager'], 'RollingAverager': ['AveragedNoise'], 'AveragedNoise': ['Plot']}\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InteractionGraph = () => {\n  _s();\n\n  const [node_name, setName] = useState(\"None\");\n  const [connections, setConnections] = useState([]);\n  const [elements, setElements] = useState([]);\n  const [dataArray, setDataArray] = useState([]); // getting the node that the user is clicking \n\n  const onElementClick = (event, element) => {\n    setName(element.id);\n    console.log(\"node\", node_name);\n  }; // receiving the messages from server \n\n\n  useEffect(() => {\n    // connecting to the server \n    const client = new W3CWebSocket('ws://localhost:9000');\n\n    client.onopen = () => {\n      console.log('connected');\n      client.send(JSON.stringify({\n        \"api_version\": \"0.1\",\n        \"api_request\": {\n          \"request_id\": 1,\n          \"start_stream_request\": {\n            \"stream_id\": \"LABGRAPH.MONITOR\",\n            \"labgraph.monitor\": {}\n          }\n        }\n      }));\n    };\n\n    client.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data);\n\n      if (dataFromServer.stream_batch) {\n        const data_array = dataFromServer.stream_batch[\"labgraph.monitor\"].samples[0].data;\n        const connections = dataToConnections(data_array);\n        const elements = connectionsToNodes(connections);\n        const nodeObjects = dataToObjects(data_array);\n        setElements(elements);\n        setConnections(connections);\n        setDataArray(data_array);\n        console.log(\"connection\", connections);\n        console.log(\"server message received \", data_array);\n      }\n    };\n\n    return () => {\n      client.close();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Node\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: node_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: data_array[node_name].type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 800\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        elements: elements,\n        onElementClick: onElementClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 3\n  }, this);\n};\n\n_s(InteractionGraph, \"pY3TjKdeNrWBr1OWAix3t9CI4+Q=\");\n\n_c = InteractionGraph;\nexport default InteractionGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"InteractionGraph\");","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/src/App.js"],"names":["React","useState","useEffect","w3cwebsocket","W3CWebSocket","ReactFlow","addEdge","MiniMap","Controls","dataToConnections","connectionsToNodes","dataToObjects","InteractionGraph","node_name","setName","connections","setConnections","elements","setElements","dataArray","setDataArray","onElementClick","event","element","id","console","log","client","onopen","send","JSON","stringify","onmessage","message","dataFromServer","parse","data","stream_batch","data_array","samples","nodeObjects","close","type","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport ReactFlow, { addEdge, MiniMap, Controls } from 'react-flow-renderer';\r\nimport { dataToConnections, connectionsToNodes, dataToObjects } from './helper';\r\n\r\n// sample connections array: {'NoiseGenerator': ['RollingAverager'], 'RollingAverager': ['AveragedNoise'], 'AveragedNoise': ['Plot']}\r\n\r\nconst InteractionGraph = () => {\r\n  const [node_name, setName] = useState(\"None\");\r\n  const [connections, setConnections] = useState([]);\r\n  const [elements, setElements] = useState([]);\r\n  const [dataArray, setDataArray] = useState([]);\r\n\r\n  // getting the node that the user is clicking \r\n  const onElementClick = (event, element) => {\r\n    setName(element.id)\r\n    console.log(\"node\", node_name)\r\n  };\r\n\r\n  // receiving the messages from server \r\n  useEffect(() => {\r\n    // connecting to the server \r\n    const client = new W3CWebSocket('ws://localhost:9000');\r\n\r\n    client.onopen = () => {\r\n      console.log('connected');\r\n      client.send(JSON.stringify({\r\n        \"api_version\": \"0.1\",\r\n        \"api_request\": {\r\n          \"request_id\": 1,\r\n          \"start_stream_request\": {\r\n            \"stream_id\": \"LABGRAPH.MONITOR\",\r\n             \"labgraph.monitor\": {\r\n             }\r\n          }\r\n        }\r\n     }))\r\n    };\r\n\r\n    client.onmessage = (message) => {\r\n      const dataFromServer = JSON.parse(message.data);\r\n      if (dataFromServer.stream_batch){\r\n        const data_array = dataFromServer.stream_batch[\"labgraph.monitor\"].samples[0].data;\r\n        const connections = dataToConnections(data_array);\r\n        const elements = connectionsToNodes(connections);\r\n        const nodeObjects = dataToObjects(data_array);\r\n        setElements(elements);\r\n        setConnections(connections);\r\n        setDataArray(data_array);\r\n        console.log(\"connection\", connections);\r\n        console.log(\"server message received \", data_array)\r\n      }\r\n    };\r\n\r\n    return () => {\r\n      client.close();\r\n    }\r\n  }, []);\r\n\r\n  return(\r\n  <div>\r\n    <div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Node</th>\r\n            <th>Type</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>{node_name}</td>\r\n            <td>{data_array[node_name].type}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n    <div style={{ height: 800 }}> \r\n    <ReactFlow \r\n    elements={elements}\r\n    onElementClick={onElementClick}/>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  \r\n  )\r\n};\r\n\r\nexport default InteractionGraph;"]},"metadata":{},"sourceType":"module"}