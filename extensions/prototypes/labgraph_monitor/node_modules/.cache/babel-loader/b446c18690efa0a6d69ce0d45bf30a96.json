{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = initOrder;\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\n\nfunction initOrder(g) {\n  var visited = {};\n\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n\n  var maxRank = _.max(_.map(simpleNodes, function (v) {\n    return g.node(v).rank;\n  }));\n\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/node_modules/dagre/lib/order/init-order.js"],"names":["_","require","module","exports","initOrder","g","visited","simpleNodes","filter","nodes","v","children","length","maxRank","max","map","node","rank","layers","range","dfs","has","push","forEach","successors","orderedVs","sortBy"],"mappings":"AAAA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,WAAD,CAAf;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,SAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,SAAT,CAAmBC,CAAnB,EAAsB;AACpB,MAAIC,OAAO,GAAG,EAAd;;AACA,MAAIC,WAAW,GAAGP,CAAC,CAACQ,MAAF,CAASH,CAAC,CAACI,KAAF,EAAT,EAAoB,UAASC,CAAT,EAAY;AAChD,WAAO,CAACL,CAAC,CAACM,QAAF,CAAWD,CAAX,EAAcE,MAAtB;AACD,GAFiB,CAAlB;;AAGA,MAAIC,OAAO,GAAGb,CAAC,CAACc,GAAF,CAAMd,CAAC,CAACe,GAAF,CAAMR,WAAN,EAAmB,UAASG,CAAT,EAAY;AAAE,WAAOL,CAAC,CAACW,IAAF,CAAON,CAAP,EAAUO,IAAjB;AAAwB,GAAzD,CAAN,CAAd;;AACA,MAAIC,MAAM,GAAGlB,CAAC,CAACe,GAAF,CAAMf,CAAC,CAACmB,KAAF,CAAQN,OAAO,GAAG,CAAlB,CAAN,EAA4B,YAAW;AAAE,WAAO,EAAP;AAAY,GAArD,CAAb;;AAEA,WAASO,GAAT,CAAaV,CAAb,EAAgB;AACd,QAAIV,CAAC,CAACqB,GAAF,CAAMf,OAAN,EAAeI,CAAf,CAAJ,EAAuB;AACvBJ,IAAAA,OAAO,CAACI,CAAD,CAAP,GAAa,IAAb;AACA,QAAIM,IAAI,GAAGX,CAAC,CAACW,IAAF,CAAON,CAAP,CAAX;AACAQ,IAAAA,MAAM,CAACF,IAAI,CAACC,IAAN,CAAN,CAAkBK,IAAlB,CAAuBZ,CAAvB;;AACAV,IAAAA,CAAC,CAACuB,OAAF,CAAUlB,CAAC,CAACmB,UAAF,CAAad,CAAb,CAAV,EAA2BU,GAA3B;AACD;;AAED,MAAIK,SAAS,GAAGzB,CAAC,CAAC0B,MAAF,CAASnB,WAAT,EAAsB,UAASG,CAAT,EAAY;AAAE,WAAOL,CAAC,CAACW,IAAF,CAAON,CAAP,EAAUO,IAAjB;AAAwB,GAA5D,CAAhB;;AACAjB,EAAAA,CAAC,CAACuB,OAAF,CAAUE,SAAV,EAAqBL,GAArB;;AAEA,SAAOF,MAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = initOrder;\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function(v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(_.map(simpleNodes, function(v) { return g.node(v).rank; }));\n  var layers = _.map(_.range(maxRank + 1), function() { return []; });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function(v) { return g.node(v).rank; });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n"]},"metadata":{},"sourceType":"script"}