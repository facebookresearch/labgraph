{"ast":null,"code":"var _ = require(\"../lodash\");\n\nmodule.exports = addSubgraphConstraints;\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n      rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n        parent,\n        prevChild;\n\n    while (child) {\n      parent = g.parent(child);\n\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n\n      child = parent;\n    }\n  });\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n\n}","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/node_modules/dagre/lib/order/add-subgraph-constraints.js"],"names":["_","require","module","exports","addSubgraphConstraints","g","cg","vs","prev","rootPrev","forEach","v","child","parent","prevChild","setEdge"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,WAAD,CAAf;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,sBAAjB;;AAEA,SAASA,sBAAT,CAAgCC,CAAhC,EAAmCC,EAAnC,EAAuCC,EAAvC,EAA2C;AACzC,MAAIC,IAAI,GAAG,EAAX;AAAA,MACEC,QADF;;AAGAT,EAAAA,CAAC,CAACU,OAAF,CAAUH,EAAV,EAAc,UAASI,CAAT,EAAY;AACxB,QAAIC,KAAK,GAAGP,CAAC,CAACQ,MAAF,CAASF,CAAT,CAAZ;AAAA,QACEE,MADF;AAAA,QAEEC,SAFF;;AAGA,WAAOF,KAAP,EAAc;AACZC,MAAAA,MAAM,GAAGR,CAAC,CAACQ,MAAF,CAASD,KAAT,CAAT;;AACA,UAAIC,MAAJ,EAAY;AACVC,QAAAA,SAAS,GAAGN,IAAI,CAACK,MAAD,CAAhB;AACAL,QAAAA,IAAI,CAACK,MAAD,CAAJ,GAAeD,KAAf;AACD,OAHD,MAGO;AACLE,QAAAA,SAAS,GAAGL,QAAZ;AACAA,QAAAA,QAAQ,GAAGG,KAAX;AACD;;AACD,UAAIE,SAAS,IAAIA,SAAS,KAAKF,KAA/B,EAAsC;AACpCN,QAAAA,EAAE,CAACS,OAAH,CAAWD,SAAX,EAAsBF,KAAtB;AACA;AACD;;AACDA,MAAAA,KAAK,GAAGC,MAAR;AACD;AACF,GAnBD;AAqBA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC","sourcesContent":["var _ = require(\"../lodash\");\n\nmodule.exports = addSubgraphConstraints;\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function(v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n"]},"metadata":{},"sourceType":"script"}