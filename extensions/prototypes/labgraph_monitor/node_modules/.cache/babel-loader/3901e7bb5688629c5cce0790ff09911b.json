{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zenak\\\\Desktop\\\\labgraph_monitor\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport ReactFlow, { addEdge, MiniMap, Controls } from 'react-flow-renderer'; // sample input: [(NoiseGenerator, RollingAverager),(RollingAverager, AveragedNoise),(AveragedNoise, Plot)]\n// sample adjacency list: {'NoiseGenerator': ['RollingAverager'], 'RollingAverager': ['AveragedNoise'], 'AveragedNoise': ['Plot']}\n// connecting to the server \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new W3CWebSocket('ws://localhost:9000'); // adjacency list generated from NodeList.py file\n\nconst adjacencyList = {\n  'NoiseGenerator': ['RollingAverager'],\n  'RollingAverager': ['AveragedNoise'],\n  'AveragedNoise': ['Plot']\n};\nconst adjacencyListKeys = Object.keys(adjacencyList); // adding all nodes of the graph without duplicates\n\nconst allNodes = Object.keys(adjacencyList);\n\nfor (let [, edgeNodes] of Object.entries(adjacencyList)) {\n  for (let n of edgeNodes) {\n    if (!allNodes.includes(n)) {\n      allNodes.push(n);\n    }\n  }\n} // generating the elements list having nodes with their properties\n\n\nconst elements = [];\nlet i = 0;\n\nfor (let node of allNodes) {\n  elements.push({\n    id: node,\n    data: {\n      label: node\n    },\n    position: {\n      x: 100 + 60 * i,\n      y: 125 + 60 * i\n    }\n  });\n  i++;\n} // generating the edges between every source and target node\n\n\nfor (let i = 0; i < adjacencyListKeys.length; i++) {\n  const node = adjacencyListKeys[i];\n  const edgeNodes = adjacencyList[node];\n\n  for (let edgeNode of edgeNodes) {\n    elements.push({\n      id: `e-${node}-${edgeNode}`,\n      source: node,\n      target: edgeNode,\n      animated: true\n    });\n  }\n}\n\nconst InteractionGraph = () => {\n  _s();\n\n  const [node_name, setNode] = useState(\"None\");\n\n  const onElementClick = (event, element) => {\n    setNode(element.id);\n    console.log(\"node\", node_name);\n  };\n\n  useEffect(() => {\n    client.onopen = () => {\n      console.log('connected');\n    };\n\n    client.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data);\n      console.log(\"server message received \", message);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Node\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: node_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Message 1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 800\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        elements: elements,\n        onElementClick: onElementClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 3\n  }, this);\n};\n\n_s(InteractionGraph, \"OCGDlWehlU66pfoUK5q+L0RFDGs=\");\n\n_c = InteractionGraph;\nexport default InteractionGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"InteractionGraph\");","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/src/App.js"],"names":["React","useState","useEffect","w3cwebsocket","W3CWebSocket","ReactFlow","addEdge","MiniMap","Controls","client","adjacencyList","adjacencyListKeys","Object","keys","allNodes","edgeNodes","entries","n","includes","push","elements","i","node","id","data","label","position","x","y","length","edgeNode","source","target","animated","InteractionGraph","node_name","setNode","onElementClick","event","element","console","log","onopen","onmessage","message","dataFromServer","JSON","parse","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport ReactFlow, { addEdge, MiniMap, Controls } from 'react-flow-renderer';\r\n\r\n// sample input: [(NoiseGenerator, RollingAverager),(RollingAverager, AveragedNoise),(AveragedNoise, Plot)]\r\n// sample adjacency list: {'NoiseGenerator': ['RollingAverager'], 'RollingAverager': ['AveragedNoise'], 'AveragedNoise': ['Plot']}\r\n\r\n// connecting to the server \r\nconst client = new W3CWebSocket('ws://localhost:9000');\r\n\r\n// adjacency list generated from NodeList.py file\r\nconst adjacencyList = {'NoiseGenerator': ['RollingAverager'], 'RollingAverager': ['AveragedNoise'], 'AveragedNoise': ['Plot']}\r\n\r\nconst adjacencyListKeys = Object.keys(adjacencyList)\r\n\r\n// adding all nodes of the graph without duplicates\r\nconst allNodes = Object.keys(adjacencyList)\r\nfor (let [, edgeNodes] of Object.entries(adjacencyList)) {\r\n  for (let n of edgeNodes) {\r\n    if (!allNodes.includes(n)) {\r\n      allNodes.push(n)\r\n    }\r\n  }\r\n}\r\n\r\n// generating the elements list having nodes with their properties\r\nconst elements = []\r\nlet i = 0\r\nfor (let node of allNodes) {\r\n  elements.push({\r\n    id: node,\r\n    data: { label: node },\r\n    position: { x: 100 + 60 * i, y: 125 + 60 * i },\r\n  })\r\n  i++;\r\n}\r\n\r\n// generating the edges between every source and target node\r\nfor (let i = 0; i < adjacencyListKeys.length; i++) {\r\n  const node = adjacencyListKeys[i]\r\n  const edgeNodes = adjacencyList[node]\r\n  for (let edgeNode of edgeNodes) {\r\n    elements.push({ id: `e-${node}-${edgeNode}`, source: node, target: edgeNode, animated: true },)\r\n  }\r\n}\r\n\r\nconst InteractionGraph = () => {\r\n  const [node_name, setNode] = useState(\"None\");\r\n\r\n  const onElementClick = (event, element) => {\r\n    setNode(element.id)\r\n    console.log(\"node\", node_name)\r\n  };\r\n\r\n  useEffect(() => {\r\n    client.onopen = () => {\r\n      console.log('connected')\r\n    };\r\n\r\n    client.onmessage = (message) => {\r\n      const dataFromServer = JSON.parse(message.data);\r\n      console.log(\"server message received \", message)\r\n    };\r\n  }, []);\r\n\r\n  return(\r\n  <div>\r\n    <div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Node</th>\r\n            <th>Message</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>{node_name}</td>\r\n            <td>Message 1</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n    <div style={{ height: 800 }}> \r\n    <ReactFlow \r\n    elements={elements}\r\n    onElementClick={onElementClick}/>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  \r\n  )\r\n};\r\n\r\nexport default InteractionGraph;"]},"metadata":{},"sourceType":"module"}