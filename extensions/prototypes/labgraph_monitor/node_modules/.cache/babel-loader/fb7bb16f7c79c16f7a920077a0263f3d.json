{"ast":null,"code":"/**\r\n * Converts the data from server to connections array\r\n * @param {Array} data - data received from server through websocket\r\n * @return {Array} An array having arrays of connections\r\n */\nfunction dataToConnections(data) {\n  const connections = {};\n\n  for (const [a, b] of data) {\n    connections[Object.keys(a)[0]] = [Object.keys(b)[0]];\n  }\n\n  return connections;\n}\n/**\r\n * Converts the data from server to connections array\r\n * @param {Array} data - data received from server through websocket\r\n * @return {Array} An array having arrays of Objects representation of data from server\r\n */\n\n\nfunction dataToNodes(data) {\n  const connections = {};\n\n  for (const [a, b] of data) {\n    connections[Object.keys(a)[0]] = a[Object.keys(a)[0]];\n    connections[Object.keys(b)[0]] = b[Object.keys(b)[0]];\n  }\n\n  return connections;\n}\n/**\r\n * Converts the data from server to connections array\r\n * @param {Array} connections - connections between nodes generated from server data\r\n * @return {Array} Elements array having Nodes for graph representation. A sample graph Node has id, data and position\r\n */\n\n\nfunction connectionstoNodes(connections) {\n  const adjacencyListKeys = Object.keys(connections); // adding all nodes of the graph without duplicates\n\n  const allNodes = Object.keys(adjacencyList);\n\n  for (let [, edgeNodes] of Object.entries(adjacencyList)) {\n    for (let n of edgeNodes) {\n      if (!allNodes.includes(n)) {\n        allNodes.push(n);\n      }\n    }\n  } // generating the elements list having nodes with their properties\n\n\n  const elements = [];\n  let i = 0;\n\n  for (let node of allNodes) {\n    elements.push({\n      id: node,\n      data: {\n        label: node\n      },\n      position: {\n        x: 100 + 60 * i,\n        y: 125 + 60 * i\n      }\n    });\n    i++;\n  } // generating the edges between every source and target node\n\n\n  for (let i = 0; i < adjacencyListKeys.length; i++) {\n    const node = adjacencyListKeys[i];\n    const edgeNodes = adjacencyList[node];\n\n    for (let edgeNode of edgeNodes) {\n      elements.push({\n        id: `e-${node}-${edgeNode}`,\n        source: node,\n        target: edgeNode,\n        animated: true\n      });\n    }\n  }\n}\n\nmodule.exports = {\n  dataToConnections,\n  dataToNodes\n};","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/src/helper.js"],"names":["dataToConnections","data","connections","a","b","Object","keys","dataToNodes","connectionstoNodes","adjacencyListKeys","allNodes","adjacencyList","edgeNodes","entries","n","includes","push","elements","i","node","id","label","position","x","y","length","edgeNode","source","target","animated","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Converts the data from server to connections array\r\n * @param {Array} data - data received from server through websocket\r\n * @return {Array} An array having arrays of connections\r\n */\r\nfunction dataToConnections(data){\r\n    const connections = {}\r\n    for (const [a, b] of data) {\r\n        connections[Object.keys(a)[0]] = [\r\n            Object.keys(b)[0]\r\n        ]\r\n    }\r\n    return connections\r\n}\r\n\r\n/**\r\n * Converts the data from server to connections array\r\n * @param {Array} data - data received from server through websocket\r\n * @return {Array} An array having arrays of Objects representation of data from server\r\n */\r\nfunction dataToNodes(data){\r\n    const connections = {}\r\n    for (const [a, b] of data) {\r\n        connections[Object.keys(a)[0]] = a[Object.keys(a)[0]]\r\n        connections[Object.keys(b)[0]] = b[Object.keys(b)[0]]\r\n    }\r\n    return connections\r\n}\r\n\r\n/**\r\n * Converts the data from server to connections array\r\n * @param {Array} connections - connections between nodes generated from server data\r\n * @return {Array} Elements array having Nodes for graph representation. A sample graph Node has id, data and position\r\n */\r\n function connectionstoNodes(connections){\r\n    const adjacencyListKeys = Object.keys(connections)\r\n    // adding all nodes of the graph without duplicates\r\n    const allNodes = Object.keys(adjacencyList)\r\n    for (let [, edgeNodes] of Object.entries(adjacencyList)) {\r\n        for (let n of edgeNodes) {\r\n            if (!allNodes.includes(n)) {\r\n            allNodes.push(n)\r\n            }\r\n        }\r\n    }\r\n    // generating the elements list having nodes with their properties\r\n    const elements = []\r\n    let i = 0\r\n    for (let node of allNodes) {\r\n        elements.push({\r\n            id: node,\r\n            data: { label: node },\r\n            position: { x: 100 + 60 * i, y: 125 + 60 * i },\r\n        })\r\n        i++;\r\n    }\r\n    // generating the edges between every source and target node\r\n    for (let i = 0; i < adjacencyListKeys.length; i++) {\r\n        const node = adjacencyListKeys[i]\r\n        const edgeNodes = adjacencyList[node]\r\n        for (let edgeNode of edgeNodes) {\r\n            elements.push({ id: `e-${node}-${edgeNode}`, source: node, target: edgeNode, animated: true },)\r\n        }\r\n    }\r\n }\r\n\r\nmodule.exports = {\r\n    dataToConnections,\r\n    dataToNodes,\r\n}\r\n"]},"metadata":{},"sourceType":"module"}