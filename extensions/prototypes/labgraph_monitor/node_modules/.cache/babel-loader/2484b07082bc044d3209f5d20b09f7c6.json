{"ast":null,"code":"var root = require('./_root');\n/** Detect free variable `exports`. */\n\n\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n/** Detect free variable `module`. */\n\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n/** Detect the popular CommonJS extension `module.exports`. */\n\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n/** Built-in value references. */\n\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\n\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/node_modules/lodash/_cloneBuffer.js"],"names":["root","require","freeExports","exports","nodeType","freeModule","module","moduleExports","Buffer","undefined","allocUnsafe","cloneBuffer","buffer","isDeep","slice","length","result","constructor","copy"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAAlB;AAEA;;;AACA,IAAIC,WAAW,GAAG,OAAOC,OAAP,IAAkB,QAAlB,IAA8BA,OAA9B,IAAyC,CAACA,OAAO,CAACC,QAAlD,IAA8DD,OAAhF;AAEA;;AACA,IAAIE,UAAU,GAAGH,WAAW,IAAI,OAAOI,MAAP,IAAiB,QAAhC,IAA4CA,MAA5C,IAAsD,CAACA,MAAM,CAACF,QAA9D,IAA0EE,MAA3F;AAEA;;AACA,IAAIC,aAAa,GAAGF,UAAU,IAAIA,UAAU,CAACF,OAAX,KAAuBD,WAAzD;AAEA;;AACA,IAAIM,MAAM,GAAGD,aAAa,GAAGP,IAAI,CAACQ,MAAR,GAAiBC,SAA3C;AAAA,IACIC,WAAW,GAAGF,MAAM,GAAGA,MAAM,CAACE,WAAV,GAAwBD,SADhD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,WAAT,CAAqBC,MAArB,EAA6BC,MAA7B,EAAqC;AACnC,MAAIA,MAAJ,EAAY;AACV,WAAOD,MAAM,CAACE,KAAP,EAAP;AACD;;AACD,MAAIC,MAAM,GAAGH,MAAM,CAACG,MAApB;AAAA,MACIC,MAAM,GAAGN,WAAW,GAAGA,WAAW,CAACK,MAAD,CAAd,GAAyB,IAAIH,MAAM,CAACK,WAAX,CAAuBF,MAAvB,CADjD;AAGAH,EAAAA,MAAM,CAACM,IAAP,CAAYF,MAAZ;AACA,SAAOA,MAAP;AACD;;AAEDV,MAAM,CAACH,OAAP,GAAiBQ,WAAjB","sourcesContent":["var root = require('./_root');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;\n"]},"metadata":{},"sourceType":"script"}