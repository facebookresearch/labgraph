{"ast":null,"code":"var _ = require(\"../lodash\");\n\nvar barycenter = require(\"./barycenter\");\n\nvar resolveConflicts = require(\"./resolve-conflicts\");\n\nvar sort = require(\"./sort\");\n\nmodule.exports = sortSubgraph;\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n\n      if (_.has(subgraphResult, \"barycenter\")) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br], true);\n\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n          brPred = g.node(g.predecessors(br)[0]);\n\n      if (!_.has(result, \"barycenter\")) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n\n      result.barycenter = (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(entry.vs.map(function (v) {\n      if (subgraphs[v]) {\n        return subgraphs[v].vs;\n      }\n\n      return v;\n    }), true);\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter = (target.barycenter * target.weight + other.barycenter * other.weight) / (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}","map":{"version":3,"sources":["C:/Users/zenak/Desktop/labgraph_monitor/node_modules/dagre/lib/order/sort-subgraph.js"],"names":["_","require","barycenter","resolveConflicts","sort","module","exports","sortSubgraph","g","v","cg","biasRight","movable","children","node","bl","borderLeft","undefined","br","borderRight","subgraphs","filter","w","barycenters","forEach","entry","length","subgraphResult","has","mergeBarycenters","entries","expandSubgraphs","result","vs","flatten","predecessors","blPred","brPred","weight","order","map","target","other","isUndefined"],"mappings":"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","sourcesContent":["var _ = require(\"../lodash\");\nvar barycenter = require(\"./barycenter\");\nvar resolveConflicts = require(\"./resolve-conflicts\");\nvar sort = require(\"./sort\");\n\nmodule.exports = sortSubgraph;\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight: undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function(w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function(entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (_.has(subgraphResult, \"barycenter\")) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br], true);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!_.has(result, \"barycenter\")) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter = (result.barycenter * result.weight +\n                           blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function(entry) {\n    entry.vs = _.flatten(entry.vs.map(function(v) {\n      if (subgraphs[v]) {\n        return subgraphs[v].vs;\n      }\n      return v;\n    }), true);\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter = (target.barycenter * target.weight +\n                         other.barycenter * other.weight) /\n                        (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}