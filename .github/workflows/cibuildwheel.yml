name: cibuildwheel
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency
# https://docs.github.com/en/developers/webhooks-and-events/events/github-event-types#pullrequestevent
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.type }}
  cancel-in-progress: true

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      min-numpy-version: "1.19.5"
      CIBW_ARCHS_MACOS: "x86_64 universal2 arm64"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-latest, macOS-10.15]
        cibw_archs: ["auto"]
		include:
			- os: ubuntu-18.04
			  cibw_archs: "aarch64"

    steps:
      - name: Set up QEMU
          if: matrix.cibw_archs == 'aarch64'
          uses: docker/setup-qemu-action@v1
          with:
            platforms: arm64

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.10'

      - uses: actions/cache@v2
        id: numpy-cache
        with:
          path: numpy-aarch64-cache/
          key: numpy-${{ matrix.cibw_archs }}-cache-${{ env.min-numpy-version }}

      - name: Build minimum NumPy for aarch64
        if: matrix.cibw_archs == 'aarch64' && steps.numpy-cache.outputs.cache-hit != 'true'
        run: |
          wget https://files.pythonhosted.org/packages/${{ env.min-numpy-hash }}/numpy-${{ env.min-numpy-version }}.zip
          unzip numpy-${{ env.min-numpy-version }}.zip
          cd numpy-${{ env.min-numpy-version }}
          python -m cibuildwheel --output-dir ../numpy-aarch64-cache
        env:
          CIBW_BUILD: "cp36-* cp37-* cp38-* cp39-* cp310-*"
          CIBW_ARCHS: aarch64

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.3.1

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      name: Install Python
      with:
        python-version: '3.7'

    - name: Build sdist
      run: |
        python -m pip install --upgrade pip setuptools build wheel
        python -m build --sdist -o dist/

    - uses: actions/upload-artifact@v2
      with:
        path: dist/*.tar.gz

  # upload_test_pypi:
  #   needs: [build_wheels, build_sdist]
  #   runs-on: ubuntu-latest
  #   # upload to Test PyPI for every commit on main branch
  #   if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: artifact
  #         path: dist
  #     - uses: pypa/gh-action-pypi-publish@master
  #       with:
  #         user: __token__
  #         password: ${{ secrets.LABGRAPH_TEST_PYPI_TOKEN }}
  #         repository_url: https://test.pypi.org/legacy/

  # upload_pypi:
  #   needs: [build_wheels, build_sdist]
  #   runs-on: ubuntu-latest
  #   # upload to PyPI on every tag starting with 'v'
  #   if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
  #   # alternatively, to publish when a GitHub Release is created, use the following rule:
  #   # if: github.event_name == 'release' && github.event.action == 'published'
  #   steps:
  #   - uses: actions/download-artifact@v2
  #     with:
  #       name: artifact
  #       path: dist
  #   - uses: pypa/gh-action-pypi-publish@master
  #     with:
  #       user: __token__
  #       password: ${{ secrets.LABGRAPH_PYPI_TOKEN }}
